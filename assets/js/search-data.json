{
  
    
        "post0": {
            "title": "Data in NumPy",
            "content": "Python is convenient, but it can also be slow. However, it does allow you to access libraries that execute faster code written in languages like C. NumPy is one such library: it provides fast alternatives to math operations in Python and is designed to work efficiently with groups of numbers - like matrices. . NumPy is a large library and we are only going to scratch the surface of it here. If you plan on doing much math with Python, you should definitely spend some time exploring its documentation to learn more. . Importing NumPy . When importing the NumPy library, the convention you&#39;ll see used most often – including here – is to name it np, like so: . import numpy as np . Now you can use the library by prefixing the names of functions and types with np., which you&#39;ll see in the following examples . Data Types and Shapes . The most common way to work with numbers in NumPy is through ndarray objects. They are similar to Python lists, but can have any number of dimensions. Also, ndarray supports fast math operations, which is just what we want. . Since it can store any number of dimensions, you can use ndarrays to represent any of the data types we covered before: scalars, vectors, matrices, or tensors. . Scalars . Scalars in NumPy are a bit more involved than in Python. Instead of Python’s basic types like int, float, etc., NumPy lets you specify signed and unsigned types, as well as different sizes. So instead of Python’s int, you have access to types like uint8, int8, uint16, int16, and so on. . These types are important because every object you make (vectors, matrices, tensors) eventually stores scalars. And when you create a NumPy array, you can specify the type - but every item in the array must have the same type. In this regard, NumPy arrays are more like C arrays than Python lists. . If you want to create a NumPy array that holds a scalar, you do so by passing the value to NumPy&#39;s array function, like so: . s = np.array(5) . s.shape . () . () means it has zero dimensions. . x = s + 3 x . 8 . Vectors . To create a vector, you&#39;d pass a Python list to the array function, like this: . v = np.array([1,2,3]) v.shape . (3,) . x = v[1] x . 2 . x = v[1:] x . array([2, 3]) . Matrices . You create matrices using NumPy&#39;s array function, just you did for vectors. However, instead of just passing in a list, you need to supply a list of lists, where each list represents a row. So to create a 3x3 matrix containing the numbers one through nine, you could do this: . m = np.array([[1,2,3], [4,5,6], [7,8,9]]) m . array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) . m.shape . (3, 3) . m[2][2] . 9 . Tensors . Tensors are just like vectors and matrices, but they can have more dimensions. For example, to create a 3x3x2x1 tensor, you could do the following: . t = np.array([[[[1],[2]],[[3],[4]],[[5],[6]]],[[[7],[8]], [[9],[10]],[[11],[12]]],[[[13],[14]],[[15],[16]],[[17],[17]]]]) t . array([[[[ 1], [ 2]], [[ 3], [ 4]], [[ 5], [ 6]]], [[[ 7], [ 8]], [[ 9], [10]], [[11], [12]]], [[[13], [14]], [[15], [16]], [[17], [17]]]]) . t.shape . (3, 3, 2, 1) . Changing Shapes . Sometimes you&#39;ll need to change the shape of your data without actually changing its contents. For example, you may have a vector, which is one-dimensional, but need a matrix, which is two-dimensional. There are two ways you can do that. . Let&#39;s say you have the following vector: . v = np.array([1,2,3,4]) v.shape . (4,) . x = v.reshape(1,4) x.shape . (1, 4) . x = v.reshape(4,1) x.shape . (4, 1) . One more thing about reshaping NumPy arrays: if you see code from experienced NumPy users, you will often see them use a special slicing syntax instead of calling reshape. Using this syntax, the previous two examples would look like this: . x = v[None, :] x . array([[1, 2, 3, 4]]) . x = v[0:, None] x . array([[1], [2], [3], [4]]) . Those lines create a slice that looks at all of the items of v but asks NumPy to add a new dimension of size 1 for the associated axis. It may look strange to you now, but it&#39;s a common technique so it&#39;s good to be aware of it. . Element-wise operations . The Python way . Suppose you had a list of numbers, and you wanted to add 5 to every item in the list. Without NumPy, you might do something like this: . values = [1,2,3,4,5] for i in range(len(values)): values[i] += 5 values . [6, 7, 8, 9, 10] . The NumPy way . In NumPy, we could do the following: . values = [1,2,3,4,5] values = np.array(values) + 5 values . array([ 6, 7, 8, 9, 10]) . Creating that array may seem odd, but normally you&#39;ll be storing your data in ndarrays anyway. So if you already had an ndarray named values, you could have just done: . values += 5 values . array([11, 12, 13, 14, 15]) . We should point out, NumPy actually has functions for things like adding, multiplying, etc. But it also supports using the standard math operators. So the following two lines are equivalent: . x = np.multiply(values, 5) x = values * 5 x . array([55, 60, 65, 70, 75]) . a = np.array([[1,3],[5,7]]) a . array([[1, 3], [5, 7]]) . b = np.array([[2,4],[6,8]]) b . array([[2, 4], [6, 8]]) . a+b . array([[ 3, 7], [11, 15]]) . Important Reminders About Matrix Multiplication . The number of columns in the left matrix must equal the number of rows in the right matrix. | The answer matrix always has the same number of rows as the left matrix and the same number of columns as the right matrix. | Order matters. Multiplying A•B is not the same as multiplying B•A. | Data in the left matrix should be arranged as rows., while data in the right matrix should be arranged as columns. | . NumPy Matrix Multiplication . You&#39;ve heard a lot about matrix multiplication in the last few videos – now you&#39;ll get to see how to do it with NumPy. However, it&#39;s important to know that NumPy supports several types of matrix multiplication. . Element-wise Multiplication You saw some element-wise multiplication already. You accomplish that with the multiply function or the * operator. Just to revisit, it would look like this: . m = np.array([[1,2,3],[4,5,6]]) m . array([[1, 2, 3], [4, 5, 6]]) . n = m * 0.25 n . array([[0.25, 0.5 , 0.75], [1. , 1.25, 1.5 ]]) . m * n . array([[0.25, 1. , 2.25], [4. , 6.25, 9. ]]) . np.multiply(m, n) . array([[0.25, 1. , 2.25], [4. , 6.25, 9. ]]) . Matrix Product . To find the matrix product, you use NumPy&#39;s matmul function. . If you have compatible shapes, then it&#39;s as simple as this: . a = np.array([[1,2,3,4],[5,6,7,8]]) a . array([[1, 2, 3, 4], [5, 6, 7, 8]]) . a.shape . (2, 4) . b = np.array([[1,2,3],[4,5,6],[7,8,9],[10,11,12]]) b . array([[ 1, 2, 3], [ 4, 5, 6], [ 7, 8, 9], [10, 11, 12]]) . b.shape . (4, 3) . c = np.matmul(a, b) c . array([[ 70, 80, 90], [158, 184, 210]]) . c.shape . (2, 3) . If your matrices have incompatible shapes, you&#39;ll get an error, like the following: . np.matmul(b, a) . ValueError Traceback (most recent call last) &lt;ipython-input-67-af3b88aa2232&gt; in &lt;module&gt; -&gt; 1 np.matmul(b, a) ValueError: matmul: Input operand 1 has a mismatch in its core dimension 0, with gufunc signature (n?,k),(k,m?)-&gt;(n?,m?) (size 2 is different from 3) . NumPy&#39;s dot function . You may sometimes see NumPy&#39;s dot function in places where you would expect a matmul. It turns out that the results of dot and matmul are the same if the matrices are two dimensional. . So these two results are equivalent: . a = np.array([[1,2],[3,4]]) a . array([[ 7, 10], [15, 22]]) . np.dot(a,a) . array([[ 7, 10], [15, 22]]) . a.dot(a) # you can call `dot` directly on the `ndarray` . array([[ 7, 10], [15, 22]]) . np.matmul(a,a) . array([[ 7, 10], [15, 22]]) . While these functions return the same results for two dimensional data, you should be careful about which you choose when working with other data shapes. You can read more about the differences, and find links to other NumPy functions, in the matmul and dot documentation. . Transpose . Getting the transpose of a matrix is really easy in NumPy. Simply access its T attribute. There is also a transpose() function which returns the same thing, but you’ll rarely see that used anywhere because typing T is so much easier. :) . For example: . m = np.array([[1,2,3,4], [5,6,7,8], [9,10,11,12]]) m . array([[ 1, 2, 3, 4], [ 5, 6, 7, 8], [ 9, 10, 11, 12]]) . m.T . array([[ 1, 5, 9], [ 2, 6, 10], [ 3, 7, 11], [ 4, 8, 12]]) . m.transpose() . array([[ 1, 5, 9], [ 2, 6, 10], [ 3, 7, 11], [ 4, 8, 12]]) . m . array([[ 1, 2, 3, 4], [ 5, 6, 7, 8], [ 9, 10, 11, 12]]) . NumPy does this without actually moving any data in memory - it simply changes the way it indexes the original matrix - so it’s quite efficient. . However, that also means you need to be careful with how you modify objects, because they are sharing the same data. For example, with the same matrix m from above, let&#39;s make a new variable m_t that stores m&#39;s transpose. Then look what happens if we modify a value in m_t: . m_t = m.T m_t[3][1] = 200 m_t . array([[ 1, 5, 9], [ 2, 6, 10], [ 3, 7, 11], [ 4, 200, 12]]) . m . array([[ 1, 2, 3, 4], [ 5, 6, 7, 200], [ 9, 10, 11, 12]]) . Notice how it modified both the transpose and the original matrix, too! That&#39;s because they are sharing the same copy of data. So remember to consider the transpose just as a different view of your matrix, rather than a different matrix entirely. . A real use case . I don&#39;t want to get into too many details about neural networks because you haven&#39;t covered them yet, but there is one place you will almost certainly end up using a transpose, or at least thinking about it. . Let&#39;s say you have the following two matrices, called inputs and weights, . inputs = np.array([[-0.27, 0.45, 0.64, 0.31]]) inputs . array([[-0.27, 0.45, 0.64, 0.31]]) . inputs.shape . (1, 4) . weights = np.array([[0.02, 0.001, -0.03, 0.036], [0.04, -0.003, 0.025, 0.009], [0.012, -0.045, 0.28, -0.067]]) . weights.shape . (3, 4) . weights . array([[ 0.02 , 0.001, -0.03 , 0.036], [ 0.04 , -0.003, 0.025, 0.009], [ 0.012, -0.045, 0.28 , -0.067]]) . I won&#39;t go into what they&#39;re for because you&#39;ll learn about them later, but you&#39;re going to end up wanting to find the matrix product of these two matrices. . If you try it like they are now, you get an error: . np.matmul(inputs, weights) . ValueError Traceback (most recent call last) &lt;ipython-input-88-6e050fb6601d&gt; in &lt;module&gt; -&gt; 1 np.matmul(inputs, weights) ValueError: matmul: Input operand 1 has a mismatch in its core dimension 0, with gufunc signature (n?,k),(k,m?)-&gt;(n?,m?) (size 3 is different from 4) . If you did the matrix multiplication lesson, then you&#39;ve seen this error before. It&#39;s complaining of incompatible shapes because the number of columns in the left matrix, 4, does not equal the number of rows in the right matrix, 3. . So that doesn&#39;t work, but notice if you take the transpose of the weights matrix, it will: . np.matmul(inputs, weights.T).shape . (1, 3) . np.matmul(weights, inputs.T) . array([[-0.01299], [ 0.00664], [ 0.13494]]) . The two answers are transposes of each other, so which multiplication you use really just depends on the shape you want for the output. .",
            "url": "https://manisaiprasad.github.io/notes/2020/05/10/DatainNumPy.html",
            "relUrl": "/2020/05/10/DatainNumPy.html",
            "date": " • May 10, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "US Flights of 2020 Jan",
            "content": "# import all packages and set plots to be embedded inline import numpy as np import pandas as pd import matplotlib.pyplot as plt import seaborn as sb %matplotlib inline . Load in your dataset and describe its properties through the questions below. Try and motivate your exploration goals through this section. . #load dataset df = pd.read_csv(&#39;./62598021_T_ONTIME_REPORTING.csv&#39;) df.head() . YEAR MONTH DAY_OF_MONTH DAY_OF_WEEK OP_UNIQUE_CARRIER TAIL_NUM OP_CARRIER_FL_NUM ORIGIN_AIRPORT_ID ORIGIN_AIRPORT_SEQ_ID ORIGIN_CITY_MARKET_ID ... ACTUAL_ELAPSED_TIME AIR_TIME FLIGHTS DISTANCE CARRIER_DELAY WEATHER_DELAY NAS_DELAY SECURITY_DELAY LATE_AIRCRAFT_DELAY Unnamed: 44 . 0 2020 | 1 | 1 | 3 | WN | N951WN | 5888 | 13891 | 1389101 | 32575 | ... | 122.0 | 74.0 | 1.0 | 363.0 | 8.0 | 0.0 | 27.0 | 0.0 | 33.0 | NaN | . 1 2020 | 1 | 1 | 3 | WN | N467WN | 6276 | 13891 | 1389101 | 32575 | ... | 92.0 | 71.0 | 1.0 | 363.0 | NaN | NaN | NaN | NaN | NaN | NaN | . 2 2020 | 1 | 1 | 3 | WN | N7885A | 4598 | 13891 | 1389101 | 32575 | ... | 68.0 | 57.0 | 1.0 | 333.0 | NaN | NaN | NaN | NaN | NaN | NaN | . 3 2020 | 1 | 1 | 3 | WN | N551WN | 4761 | 13891 | 1389101 | 32575 | ... | 75.0 | 63.0 | 1.0 | 333.0 | NaN | NaN | NaN | NaN | NaN | NaN | . 4 2020 | 1 | 1 | 3 | WN | N968WN | 5162 | 13891 | 1389101 | 32575 | ... | 67.0 | 57.0 | 1.0 | 333.0 | NaN | NaN | NaN | NaN | NaN | NaN | . 5 rows × 45 columns . df.shape . (607346, 45) . df.dtypes . YEAR int64 MONTH int64 DAY_OF_MONTH int64 DAY_OF_WEEK int64 OP_UNIQUE_CARRIER object TAIL_NUM object OP_CARRIER_FL_NUM int64 ORIGIN_AIRPORT_ID int64 ORIGIN_AIRPORT_SEQ_ID int64 ORIGIN_CITY_MARKET_ID int64 ORIGIN object ORIGIN_STATE_ABR object ORIGIN_STATE_FIPS int64 ORIGIN_STATE_NM object DEST_AIRPORT_ID int64 DEST_AIRPORT_SEQ_ID int64 DEST_CITY_MARKET_ID int64 DEST object DEST_STATE_ABR object DEST_STATE_FIPS int64 DEST_STATE_NM object CRS_DEP_TIME int64 DEP_TIME float64 DEP_DELAY float64 DEP_DELAY_NEW float64 TAXI_OUT float64 TAXI_IN float64 CRS_ARR_TIME int64 ARR_TIME float64 ARR_DELAY float64 ARR_DELAY_NEW float64 CANCELLED float64 CANCELLATION_CODE object DIVERTED float64 CRS_ELAPSED_TIME float64 ACTUAL_ELAPSED_TIME float64 AIR_TIME float64 FLIGHTS float64 DISTANCE float64 CARRIER_DELAY float64 WEATHER_DELAY float64 NAS_DELAY float64 SECURITY_DELAY float64 LATE_AIRCRAFT_DELAY float64 Unnamed: 44 float64 dtype: object . df.head(10) . YEAR MONTH DAY_OF_MONTH DAY_OF_WEEK OP_UNIQUE_CARRIER TAIL_NUM OP_CARRIER_FL_NUM ORIGIN_AIRPORT_ID ORIGIN_AIRPORT_SEQ_ID ORIGIN_CITY_MARKET_ID ... ACTUAL_ELAPSED_TIME AIR_TIME FLIGHTS DISTANCE CARRIER_DELAY WEATHER_DELAY NAS_DELAY SECURITY_DELAY LATE_AIRCRAFT_DELAY Unnamed: 44 . 0 2020 | 1 | 1 | 3 | WN | N951WN | 5888 | 13891 | 1389101 | 32575 | ... | 122.0 | 74.0 | 1.0 | 363.0 | 8.0 | 0.0 | 27.0 | 0.0 | 33.0 | NaN | . 1 2020 | 1 | 1 | 3 | WN | N467WN | 6276 | 13891 | 1389101 | 32575 | ... | 92.0 | 71.0 | 1.0 | 363.0 | NaN | NaN | NaN | NaN | NaN | NaN | . 2 2020 | 1 | 1 | 3 | WN | N7885A | 4598 | 13891 | 1389101 | 32575 | ... | 68.0 | 57.0 | 1.0 | 333.0 | NaN | NaN | NaN | NaN | NaN | NaN | . 3 2020 | 1 | 1 | 3 | WN | N551WN | 4761 | 13891 | 1389101 | 32575 | ... | 75.0 | 63.0 | 1.0 | 333.0 | NaN | NaN | NaN | NaN | NaN | NaN | . 4 2020 | 1 | 1 | 3 | WN | N968WN | 5162 | 13891 | 1389101 | 32575 | ... | 67.0 | 57.0 | 1.0 | 333.0 | NaN | NaN | NaN | NaN | NaN | NaN | . 5 2020 | 1 | 1 | 3 | WN | N7856A | 5684 | 13891 | 1389101 | 32575 | ... | 80.0 | 57.0 | 1.0 | 333.0 | NaN | NaN | NaN | NaN | NaN | NaN | . 6 2020 | 1 | 1 | 3 | WN | N7735A | 6152 | 13891 | 1389101 | 32575 | ... | 72.0 | 62.0 | 1.0 | 333.0 | NaN | NaN | NaN | NaN | NaN | NaN | . 7 2020 | 1 | 1 | 3 | WN | N405WN | 1679 | 13891 | 1389101 | 32575 | ... | 73.0 | 66.0 | 1.0 | 390.0 | 0.0 | 0.0 | 0.0 | 7.0 | 40.0 | NaN | . 8 2020 | 1 | 1 | 3 | WN | N489WN | 3479 | 13891 | 1389101 | 32575 | ... | 100.0 | 73.0 | 1.0 | 390.0 | NaN | NaN | NaN | NaN | NaN | NaN | . 9 2020 | 1 | 1 | 3 | WN | N7708E | 4069 | 13891 | 1389101 | 32575 | ... | 84.0 | 71.0 | 1.0 | 390.0 | NaN | NaN | NaN | NaN | NaN | NaN | . 10 rows × 45 columns . # correcting dates formate df[&#39;DEP_TIME&#39;] = df.DEP_TIME.apply(lambda x: str(int(x)).zfill(4) if pd.notnull(x) else x) df[&#39;CRS_DEP_TIME&#39;] = df.CRS_DEP_TIME.apply(lambda x: str(int(x)).zfill(4) if pd.notnull(x) else x) df[&#39;ARR_TIME&#39;] = df.ARR_TIME.apply(lambda x: str(int(x)).zfill(4) if pd.notnull(x) else x) df[&#39;CRS_ARR_TIME&#39;] = df.CRS_ARR_TIME.apply(lambda x: str(int(x)).zfill(4) if pd.notnull(x) else x) # creating AM/PM in df def setPM(x): if((x&gt;=12) &amp; (x&lt;= 23)): return &#39;PM&#39; elif((x&gt;=0) &amp; (x&lt;= 11) | (x==24)): return &#39;AM&#39; else: return x df.DEP_TIME.dropna(inplace=True) df[&#39;DepTimePM&#39;] = df.DEP_TIME.str[:2].astype(&#39;int64&#39;) df[&#39;DepTimePM&#39;] = df.DepTimePM.apply(setPM) df.DepTimePM.dropna(inplace=True) . df.describe() . YEAR MONTH DAY_OF_MONTH DAY_OF_WEEK OP_CARRIER_FL_NUM ORIGIN_AIRPORT_ID ORIGIN_AIRPORT_SEQ_ID ORIGIN_CITY_MARKET_ID ORIGIN_STATE_FIPS DEST_AIRPORT_ID ... ACTUAL_ELAPSED_TIME AIR_TIME FLIGHTS DISTANCE CARRIER_DELAY WEATHER_DELAY NAS_DELAY SECURITY_DELAY LATE_AIRCRAFT_DELAY Unnamed: 44 . count 607346.0 | 607346.0 | 607346.000000 | 607346.000000 | 607346.000000 | 607346.000000 | 6.073460e+05 | 607346.000000 | 607346.000000 | 607346.000000 | ... | 599268.000000 | 599268.000000 | 607346.0 | 607346.000000 | 82285.000000 | 82285.000000 | 82285.000000 | 82285.000000 | 82285.000000 | 0.0 | . mean 2020.0 | 1.0 | 16.014354 | 3.955735 | 2622.365261 | 12657.389167 | 1.265743e+06 | 31761.273269 | 26.876029 | 12657.196320 | ... | 137.039345 | 112.187437 | 1.0 | 798.022341 | 24.696324 | 4.594944 | 14.262733 | 0.091062 | 20.561658 | NaN | . std 0.0 | 0.0 | 8.990719 | 1.910205 | 1822.545302 | 1524.407203 | 1.524405e+05 | 1308.052641 | 16.560267 | 1524.279269 | ... | 72.293510 | 70.629553 | 0.0 | 587.282639 | 72.972359 | 39.180258 | 33.736783 | 2.308003 | 50.370818 | NaN | . min 2020.0 | 1.0 | 1.000000 | 1.000000 | 1.000000 | 10135.000000 | 1.013506e+06 | 30070.000000 | 1.000000 | 10135.000000 | ... | 18.000000 | 8.000000 | 1.0 | 31.000000 | 0.000000 | 0.000000 | 0.000000 | 0.000000 | 0.000000 | NaN | . 25% 2020.0 | 1.0 | 8.000000 | 2.000000 | 1070.000000 | 11292.000000 | 1.129202e+06 | 30713.000000 | 12.000000 | 11292.000000 | ... | 84.000000 | 61.000000 | 1.0 | 369.000000 | 0.000000 | 0.000000 | 0.000000 | 0.000000 | 0.000000 | NaN | . 50% 2020.0 | 1.0 | 16.000000 | 4.000000 | 2177.000000 | 12889.000000 | 1.288903e+06 | 31453.000000 | 26.000000 | 12889.000000 | ... | 120.000000 | 94.000000 | 1.0 | 641.000000 | 1.000000 | 0.000000 | 2.000000 | 0.000000 | 0.000000 | NaN | . 75% 2020.0 | 1.0 | 24.000000 | 5.000000 | 4108.000000 | 14027.000000 | 1.402702e+06 | 32467.000000 | 42.000000 | 14027.000000 | ... | 168.000000 | 142.000000 | 1.0 | 1037.000000 | 22.000000 | 0.000000 | 19.000000 | 0.000000 | 22.000000 | NaN | . max 2020.0 | 1.0 | 31.000000 | 7.000000 | 6860.000000 | 16869.000000 | 1.686901e+06 | 35991.000000 | 78.000000 | 16869.000000 | ... | 744.000000 | 698.000000 | 1.0 | 5095.000000 | 2489.000000 | 1525.000000 | 1408.000000 | 188.000000 | 2228.000000 | NaN | . 8 rows × 32 columns . What is the structure of your dataset? . There are 607346 flight observations with 45 features in 2020 jan. . What is/are the main feature(s) of interest in your dataset? . delayed and canceled flights in terms fo carriers, locations &amp; time. . What features in the dataset do you think will help support your investigation into your feature(s) of interest? . Arr_Delay, DepDelay, Cancelled, Month, Day_Of_Week, Dep_Time, Arr_Time, OP_UNIQUE_CARRIER, Origin &amp; Dest. . Univariate Exploration . I&#39;ll start by looking at the airlines sizes . #finding airline sizes airlines = df.OP_UNIQUE_CARRIER.value_counts() plt.title(&#39;Airline size&#39;) plt.xlabel(&#39;Airline&#39;) plt.ylabel(&#39;Flights&#39;) plt.bar(airlines.index, airlines); . Flight quantity is different among airlines. . Flights size in each state . #finding flight size in every state plt.figure(figsize=[20,4]) states = df.ORIGIN_STATE_ABR.value_counts() # Add title and axis names plt.title(&#39;Flights size in each state&#39;) plt.xlabel(&#39;States&#39;) plt.ylabel(&#39;Flights&#39;) plt.bar(states.index, states); . Flight quantity is different among airlines. . Flights distributed during days of week . #flights in week width = 1 bins = np.arange(1, 9, width) plt.hist(df.DAY_OF_WEEK, rwidth=.8 , bins=bins) name_days = [&#39;Mon&#39;, &#39;Tue&#39;, &#39;Wed&#39;, &#39;Thu&#39;, &#39;Fri&#39;, &#39;Sat&#39;, &#39;Sun&#39;] # Add title and axis names plt.title(&#39;Flights distributed during days of week&#39;) plt.xlabel(&#39;Days&#39;) plt.ylabel(&#39;Flights&#39;) plt.xticks(np.arange(1.5,max(bins),width), name_days); . There are little drop of flights in weekend. . Rate of cancelled flights . plt.title(&#39;Rate of cancelled flights&#39;) plt.pie(df.CANCELLED.value_counts(), autopct=&#39;%.2f%%&#39;); . There are 1.14% flights were cancelled. . Distribution of departure delay . plt.figure(figsize=[15,4]) plt.subplot(2,1,1) step = 5 x_min, x_max = -30, 110 bin_edges = np.arange(df.DEP_DELAY.min()-step, df.DEP_DELAY.max()+step, step) plt.hist(df.DEP_DELAY, bins=bin_edges) plt.xlim(x_min,x_max) plt.xticks(np.arange(x_min, x_max, step)) # Add title and axis names plt.title(&#39;Distribution of departure delay&#39;) plt.ylabel(&#39;Flights&#39;) plt.subplot(2,1,2) plt.boxplot(x=df[pd.notnull(df.DEP_DELAY)].DEP_DELAY, vert=False, showfliers=False) plt.xlim(x_min,x_max) plt.xticks(np.arange(x_min, x_max, step)); . There are delayed departures as well as earlier departures and the most of them are between -25 to 25 min differ of the scheduled time. However, there is a flight has been delayed more than 1 day and 17 hours, and also there is a flight had be earlier around 9 hours of the schedule time. . Distribution of arrival delay . plt.figure(figsize=[15,4]) plt.subplot(2,1,1) step = 5 x_min, x_max = -50, 160 bin_edges = np.arange(df.ARR_DELAY.min()-step, df.ARR_DELAY.max()+step, step) plt.hist(df.ARR_DELAY, bins=bin_edges) plt.xlim(x_min, x_max) plt.xticks(np.arange(x_min, x_max, step)) # Add title and axis names plt.title(&#39;Distribution of arrival delay&#39;) plt.ylabel(&#39;Flights&#39;) plt.subplot(2,1,2) plt.boxplot(x=df[pd.notnull(df.ARR_DELAY)].ARR_DELAY, vert=False, showfliers=False) plt.xlim(x_min, x_max) plt.xticks(np.arange(x_min, x_max, step)); . There are delayed arrivals as well as earlier arrivals and the most of them are between -45 to 45 min differ of the scheduled time. . Bivariate Exploration . To start off with, I want to look at relationship among Cannelled, DepDelay, ArrDelay &amp; flight quantity of airlines in terms of airlines . sample = df.groupby(&#39;OP_UNIQUE_CARRIER&#39;) sample = pd.merge( pd.DataFrame(sample.CANCELLED.count()), pd.DataFrame(sample.DEP_DELAY.sum()), on=&#39;OP_UNIQUE_CARRIER&#39; ).merge( pd.DataFrame(sample.ARR_DELAY.sum()), on=&#39;OP_UNIQUE_CARRIER&#39; ) sb.pairplot(sample); . There are positive correlation coefficients among Cannelled, DepDelay, ArrDelay &amp; flight quantity of airlines. . Relationship among Cannelled, DepDelay, ArrDelay &amp; flight quantity of airlines in terms of states . sample = df.groupby(&#39;ORIGIN_STATE_ABR&#39;) sample = pd.merge( pd.DataFrame(sample.CANCELLED.count()), pd.DataFrame(sample.DEP_DELAY.sum()), on=&#39;ORIGIN_STATE_ABR&#39; ).merge( pd.DataFrame(sample.ARR_DELAY.sum()), on=&#39;ORIGIN_STATE_ABR&#39; ) sb.pairplot(sample); . There are positive correlation coefficients among Cannelled, DepDelay, ArrDelay &amp; flight quantity of states. . Relationship between states &amp; airlines . state_airlines = df.groupby([&#39;ORIGIN_STATE_ABR&#39;, &#39;OP_UNIQUE_CARRIER&#39;], as_index=False).count() state_airlines = state_airlines[[&#39;ORIGIN_STATE_ABR&#39;, &#39;OP_UNIQUE_CARRIER&#39;]] plt.figure(figsize=[17,5]) # Add title and axis names plt.title(&#39;Relationship between states &amp; airlines&#39;) plt.xlabel(&#39;States&#39;) plt.ylabel(&#39;Airlines&#39;) plt.scatter(state_airlines.ORIGIN_STATE_ABR, state_airlines.OP_UNIQUE_CARRIER); . The most of airlines reach the most of states. . Cancelled flights for each airline . carriers = df.groupby([&#39;OP_UNIQUE_CARRIER&#39;,&#39;CANCELLED&#39;], as_index=False).count() carriers = carriers.pivot_table(&#39;YEAR&#39;, &#39;OP_UNIQUE_CARRIER&#39;, &#39;CANCELLED&#39;, fill_value=0) carriers.rename(columns={0:&#39;cxl_0&#39;, 1:&#39;cxl_1&#39;}, inplace=True) plt.figure(figsize=[12,10]) carriers plt.subplot(1,4,2) plt.barh(carriers.index, carriers.cxl_0, color=&#39;C0&#39;) plt.subplot(1,4,1) plt.barh(carriers.index, carriers.cxl_1*-1, color=&#39;C1&#39;) plt.yticks(&#39; &#39;) carriers.cxl_0 = np.log10(carriers.cxl_0) carriers.cxl_1 = np.log10(carriers.cxl_1) plt.subplot(1,4,4) plt.barh(carriers.index, carriers.cxl_0, color=&#39;C0&#39;) plt.xlim(0, 7) plt.subplot(1,4,3) plt.barh(carriers.index, carriers.cxl_1*-1, color=&#39;C1&#39;) plt.xlim(-7, 0) plt.yticks(&#39; &#39;); . Normalizing data by log10 make it more informative. . Multivariate Exploration . Create plots of three or more variables to investigate your data even further. Make sure that your investigations are justified, and follow from your work in the previous sections. . Delay and cancelation factors with airlines and their size. . airlines_mean = df.groupby(&#39;OP_UNIQUE_CARRIER&#39;, as_index=False).mean() airlines_count = df.groupby(&#39;OP_UNIQUE_CARRIER&#39;, as_index=False).count() airlines = airlines_mean[[&#39;OP_UNIQUE_CARRIER&#39;,&#39;ARR_DELAY&#39;,&#39;CANCELLED&#39;]].merge( airlines_count[[&#39;OP_UNIQUE_CARRIER&#39;,&#39;FLIGHTS&#39;]], on=&#39;OP_UNIQUE_CARRIER&#39; ) airlines.rename(columns={&#39;FLIGHTS&#39;:&#39;Count&#39;}, inplace=True) airlines[&#39;Size&#39;] = airlines.Count.map(lambda x: round(x/120000)+1) airlines[&#39;Size&#39;] = airlines.Size.map(lambda x: 7 if x&gt;7 else x) plt.scatter(airlines.ARR_DELAY, airlines.CANCELLED, s=airlines.Size**3) x_max = max(airlines.ARR_DELAY) x_min = min(airlines.ARR_DELAY) y_max = max(airlines.CANCELLED) y_min = min(airlines.CANCELLED) x_len = x_max - x_min y_len = y_max - y_min x = x_len*.05 y = y_len*.05 plt.xlim(x_min-x, x_max+x) plt.ylim(y_min-y, y_max+y) plt.axhline(y=y_max-(y_len/2)) plt.axvline(x_max - (x_len/2)) for i, txt in enumerate(airlines.OP_UNIQUE_CARRIER): plt.annotate(txt, (airlines.ARR_DELAY[i], airlines.CANCELLED[i])); . delay factor is impact on the most airlines while cancellation is impact on around all of them. . Delay and cancelation factors with states and flights size . state_mean = df.groupby(&#39;ORIGIN_STATE_ABR&#39;, as_index=False).mean() state_count = df.groupby(&#39;ORIGIN_STATE_ABR&#39;, as_index=False).count() states = state_mean[[&#39;ORIGIN_STATE_ABR&#39;,&#39;ARR_DELAY&#39;,&#39;CANCELLED&#39;]].merge( state_count[[&#39;ORIGIN_STATE_ABR&#39;,&#39;FLIGHTS&#39;]], on=&#39;ORIGIN_STATE_ABR&#39; ) states.rename(columns={&#39;FLIGHTS&#39;:&#39;Count&#39;}, inplace=True) states[&#39;Size&#39;] = states.Count.map(lambda x: round(x/120000)+1) states[&#39;Size&#39;] = states.Size.map(lambda x: 7 if x&gt;7 else x) plt.scatter(states.ARR_DELAY, states.CANCELLED, s=states.Size**3) x_max = max(states.ARR_DELAY) x_min = min(states.ARR_DELAY) y_max = max(states.CANCELLED) y_min = min(states.CANCELLED) x_len = x_max - x_min y_len = y_max - y_min x = x_len*.05 y = y_len*.05 plt.xlim(x_min-x, x_max+x) plt.ylim(y_min-y, y_max+y) plt.axhline(y=y_max-(y_len/2)) plt.axvline(x_max - (x_len/2)) for i, txt in enumerate(states.ORIGIN_STATE_ABR): plt.annotate(txt, (states.ARR_DELAY[i], states.CANCELLED[i])); . There is variation among states in terms of delayed and cancelled flightes and also the quantity of flights. . Delay and cancellation factors with flights in terms of time (AM/PM) . flights_mean = df.groupby([&#39;OP_CARRIER_FL_NUM&#39;,&#39;DepTimePM&#39;], as_index=False).mean() flights_count = df.groupby(&#39;OP_CARRIER_FL_NUM&#39;, as_index=False).count() flights = flights_mean[[&#39;OP_CARRIER_FL_NUM&#39;,&#39;DepTimePM&#39;, &#39;DEP_DELAY&#39;,&#39;CANCELLED&#39;]].merge( flights_count[[&#39;OP_CARRIER_FL_NUM&#39;,&#39;FLIGHTS&#39;]], on=&#39;OP_CARRIER_FL_NUM&#39; ) flights.rename(columns={&#39;FLIGHTS&#39;:&#39;Count&#39;}, inplace=True) Q1 = flights.quantile(.25) Q3 = flights.quantile(.75) IQ = Q3-Q1 Q_max = Q3+IQ*1.5 Q_min = Q1-IQ*1.5 flights_filtered = flights[(flights.DEP_DELAY &gt; Q_min.DEP_DELAY) &amp; (flights.DEP_DELAY &lt; Q_max.DEP_DELAY)] flights_filtered = flights_filtered[ (flights_filtered.Count &gt; Q_min.Count) &amp; (flights_filtered.Count &lt; Q_max.Count) ] flights_no_cxl = flights_filtered[flights_filtered.CANCELLED == 0] flights_filtered = flights_filtered[flights_filtered.CANCELLED &gt; 0] flights_filtered.reset_index(inplace=True) flights_filtered = flights[flights.CANCELLED &gt; 0] sb.scatterplot(flights_filtered.DEP_DELAY, flights_filtered.CANCELLED, alpha=.5, hue=flights_filtered.DepTimePM) # x_max = max(flights_filtered.DepDelay) x_max = 60 x_min = min(flights_filtered.DEP_DELAY) # y_max = max(flights_filtered.Cancelled) y_max = .04 y_min = min(flights_filtered.CANCELLED) x_len = x_max - x_min y_len = y_max - y_min x = x_len*.05 y = y_len*.05 plt.xlim(x_min-x, x_max+x) plt.ylim(y_min-y, y_max+y) plt.axhline(y=y_max-(y_len/2)) plt.axvline(x=x_max - (x_len/2)); . Cancelled flights are in AM flights, while PM flights have more delayed flights. . At the end of your report, make sure that you export the notebook as an html file from the File &gt; Download as... &gt; HTML menu. Make sure you keep track of where the exported file goes, so you can put it in the same folder as this notebook for project submission. Also, make sure you remove all of the quote-formatted guide notes like this one before you finish your report! .",
            "url": "https://manisaiprasad.github.io/notes/2020/04/13/us-flights-data-exploration.html",
            "relUrl": "/2020/04/13/us-flights-data-exploration.html",
            "date": " • Apr 13, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "Title",
            "content": "Supervised Learning . Project: Finding Donors for CharityML . In this notebook, some template code has already been provided for you, and it will be your job to implement the additional functionality necessary to successfully complete this project. Sections that begin with &#39;Implementation&#39; in the header indicate that the following block of code will require additional functionality which you must provide. Instructions will be provided for each section and the specifics of the implementation are marked in the code block with a &#39;TODO&#39; statement. Please be sure to read the instructions carefully! . In addition to implementing code, there will be questions that you must answer which relate to the project and your implementation. Each section where you will answer a question is preceded by a &#39;Question X&#39; header. Carefully read each question and provide thorough answers in the following text boxes that begin with &#39;Answer:&#39;. Your project submission will be evaluated based on your answers to each of the questions and the implementation you provide. . Note: Please specify WHICH VERSION OF PYTHON you are using when submitting this notebook. Code and Markdown cells can be executed using the Shift + Enter keyboard shortcut. In addition, Markdown cells can be edited by typically double-clicking the cell to enter edit mode. . Getting Started . In this project, you will employ several supervised algorithms of your choice to accurately model individuals&#39; income using data collected from the 1994 U.S. Census. You will then choose the best candidate algorithm from preliminary results and further optimize this algorithm to best model the data. Your goal with this implementation is to construct a model that accurately predicts whether an individual makes more than $50,000. This sort of task can arise in a non-profit setting, where organizations survive on donations. Understanding an individual&#39;s income can help a non-profit better understand how large of a donation to request, or whether or not they should reach out to begin with. While it can be difficult to determine an individual&#39;s general income bracket directly from public sources, we can (as we will see) infer this value from other publically available features. . The dataset for this project originates from the UCI Machine Learning Repository. The datset was donated by Ron Kohavi and Barry Becker, after being published in the article &quot;Scaling Up the Accuracy of Naive-Bayes Classifiers: A Decision-Tree Hybrid&quot;. You can find the article by Ron Kohavi online. The data we investigate here consists of small changes to the original dataset, such as removing the &#39;fnlwgt&#39; feature and records with missing or ill-formatted entries. . . Exploring the Data . Run the code cell below to load necessary Python libraries and load the census data. Note that the last column from this dataset, &#39;income&#39;, will be our target label (whether an individual makes more than, or at most, $50,000 annually). All other columns are features about each individual in the census database. . # Import libraries necessary for this project import numpy as np import pandas as pd from time import time from IPython.display import display # Allows the use of display() for DataFrames # Import supplementary visualization code visuals.py import visuals as vs # Pretty display for notebooks %matplotlib inline # Load the Census dataset data = pd.read_csv(&quot;census.csv&quot;) # Success - Display the first record display(data.head(n=1)) . age workclass education_level education-num marital-status occupation relationship race sex capital-gain capital-loss hours-per-week native-country income . 0 39 | State-gov | Bachelors | 13.0 | Never-married | Adm-clerical | Not-in-family | White | Male | 2174.0 | 0.0 | 40.0 | United-States | &lt;=50K | . Implementation: Data Exploration . A cursory investigation of the dataset will determine how many individuals fit into either group, and will tell us about the percentage of these individuals making more than $50,000. In the code cell below, you will need to compute the following: . The total number of records, &#39;n_records&#39; | The number of individuals making more than $50,000 annually, &#39;n_greater_50k&#39;. | The number of individuals making at most $50,000 annually, &#39;n_at_most_50k&#39;. | The percentage of individuals making more than $50,000 annually, &#39;greater_percent&#39;. | . HINT: You may need to look at the table above to understand how the &#39;income&#39; entries are formatted. . # TODO: Total number of records n_records = data.shape[0] # TODO: Number of records where individual&#39;s income is more than $50,000 n_greater_50k = data[data.income==&#39;&gt;50K&#39;].shape[0] # TODO: Number of records where individual&#39;s income is at most $50,000 n_at_most_50k = data[data.income==&#39;&lt;=50K&#39;].shape[0] # TODO: Percentage of individuals whose income is more than $50,000 greater_percent = n_greater_50k * 100. / n_records # Print the results print(&quot;Total number of records: {}&quot;.format(n_records)) print(&quot;Individuals making more than $50,000: {}&quot;.format(n_greater_50k)) print(&quot;Individuals making at most $50,000: {}&quot;.format(n_at_most_50k)) print(&quot;Percentage of individuals making more than $50,000: {:.2f}%&quot;.format(greater_percent)) . Total number of records: 45222 Individuals making more than $50,000: 11208 Individuals making at most $50,000: 34014 Percentage of individuals making more than $50,000: 24.78% . Featureset Exploration . age: continuous. | workclass: Private, Self-emp-not-inc, Self-emp-inc, Federal-gov, Local-gov, State-gov, Without-pay, Never-worked. | education: Bachelors, Some-college, 11th, HS-grad, Prof-school, Assoc-acdm, Assoc-voc, 9th, 7th-8th, 12th, Masters, 1st-4th, 10th, Doctorate, 5th-6th, Preschool. | education-num: continuous. | marital-status: Married-civ-spouse, Divorced, Never-married, Separated, Widowed, Married-spouse-absent, Married-AF-spouse. | occupation: Tech-support, Craft-repair, Other-service, Sales, Exec-managerial, Prof-specialty, Handlers-cleaners, Machine-op-inspct, Adm-clerical, Farming-fishing, Transport-moving, Priv-house-serv, Protective-serv, Armed-Forces. | relationship: Wife, Own-child, Husband, Not-in-family, Other-relative, Unmarried. | race: Black, White, Asian-Pac-Islander, Amer-Indian-Eskimo, Other. | sex: Female, Male. | capital-gain: continuous. | capital-loss: continuous. | hours-per-week: continuous. | native-country: United-States, Cambodia, England, Puerto-Rico, Canada, Germany, Outlying-US(Guam-USVI-etc), India, Japan, Greece, South, China, Cuba, Iran, Honduras, Philippines, Italy, Poland, Jamaica, Vietnam, Mexico, Portugal, Ireland, France, Dominican-Republic, Laos, Ecuador, Taiwan, Haiti, Columbia, Hungary, Guatemala, Nicaragua, Scotland, Thailand, Yugoslavia, El-Salvador, Trinadad&amp;Tobago, Peru, Hong, Holand-Netherlands. | . . Preparing the Data . Before data can be used as input for machine learning algorithms, it often must be cleaned, formatted, and restructured — this is typically known as preprocessing. Fortunately, for this dataset, there are no invalid or missing entries we must deal with, however, there are some qualities about certain features that must be adjusted. This preprocessing can help tremendously with the outcome and predictive power of nearly all learning algorithms. . Transforming Skewed Continuous Features . A dataset may sometimes contain at least one feature whose values tend to lie near a single number, but will also have a non-trivial number of vastly larger or smaller values than that single number. Algorithms can be sensitive to such distributions of values and can underperform if the range is not properly normalized. With the census dataset two features fit this description: &#39;capital-gain&#39; and &#39;capital-loss&#39;. . Run the code cell below to plot a histogram of these two features. Note the range of the values present and how they are distributed. . # Split the data into features and target label income_raw = data[&#39;income&#39;] features_raw = data.drop(&#39;income&#39;, axis = 1) # Visualize skewed continuous features of original data vs.distribution(data) . For highly-skewed feature distributions such as &#39;capital-gain&#39; and &#39;capital-loss&#39;, it is common practice to apply a logarithmic transformation on the data so that the very large and very small values do not negatively affect the performance of a learning algorithm. Using a logarithmic transformation significantly reduces the range of values caused by outliers. Care must be taken when applying this transformation however: The logarithm of 0 is undefined, so we must translate the values by a small amount above 0 to apply the the logarithm successfully. . Run the code cell below to perform a transformation on the data and visualize the results. Again, note the range of values and how they are distributed. . # Log-transform the skewed features skewed = [&#39;capital-gain&#39;, &#39;capital-loss&#39;] features_log_transformed = pd.DataFrame(data = features_raw) features_log_transformed[skewed] = features_raw[skewed].apply(lambda x: np.log(x + 1)) # Visualize the new log distributions vs.distribution(features_log_transformed, transformed = True) . Normalizing Numerical Features . In addition to performing transformations on features that are highly skewed, it is often good practice to perform some type of scaling on numerical features. Applying a scaling to the data does not change the shape of each feature&#39;s distribution (such as &#39;capital-gain&#39; or &#39;capital-loss&#39; above); however, normalization ensures that each feature is treated equally when applying supervised learners. Note that once scaling is applied, observing the data in its raw form will no longer have the same original meaning, as exampled below. . Run the code cell below to normalize each numerical feature. We will use sklearn.preprocessing.MinMaxScaler for this. . # Import sklearn.preprocessing.StandardScaler from sklearn.preprocessing import MinMaxScaler # Initialize a scaler, then apply it to the features scaler = MinMaxScaler() # default=(0, 1) numerical = [&#39;age&#39;, &#39;education-num&#39;, &#39;capital-gain&#39;, &#39;capital-loss&#39;, &#39;hours-per-week&#39;] features_log_minmax_transform = pd.DataFrame(data = features_log_transformed) features_log_minmax_transform[numerical] = scaler.fit_transform(features_log_transformed[numerical]) # Show an example of a record with scaling applied display(features_log_minmax_transform.head(n = 5)) . age workclass education_level education-num marital-status occupation relationship race sex capital-gain capital-loss hours-per-week native-country . 0 0.301370 | State-gov | Bachelors | 0.800000 | Never-married | Adm-clerical | Not-in-family | White | Male | 0.667492 | 0.0 | 0.397959 | United-States | . 1 0.452055 | Self-emp-not-inc | Bachelors | 0.800000 | Married-civ-spouse | Exec-managerial | Husband | White | Male | 0.000000 | 0.0 | 0.122449 | United-States | . 2 0.287671 | Private | HS-grad | 0.533333 | Divorced | Handlers-cleaners | Not-in-family | White | Male | 0.000000 | 0.0 | 0.397959 | United-States | . 3 0.493151 | Private | 11th | 0.400000 | Married-civ-spouse | Handlers-cleaners | Husband | Black | Male | 0.000000 | 0.0 | 0.397959 | United-States | . 4 0.150685 | Private | Bachelors | 0.800000 | Married-civ-spouse | Prof-specialty | Wife | Black | Female | 0.000000 | 0.0 | 0.397959 | Cuba | . Implementation: Data Preprocessing . From the table in Exploring the Data above, we can see there are several features for each record that are non-numeric. Typically, learning algorithms expect input to be numeric, which requires that non-numeric features (called categorical variables) be converted. One popular way to convert categorical variables is by using the one-hot encoding scheme. One-hot encoding creates a &quot;dummy&quot; variable for each possible category of each non-numeric feature. For example, assume someFeature has three possible entries: A, B, or C. We then encode this feature into someFeature_A, someFeature_B and someFeature_C. . someFeature someFeature_A someFeature_B someFeature_C . 0 | B | | 0 | 1 | 0 | . 1 | C | -&gt; one-hot encode -&gt; | 0 | 0 | 1 | . 2 | A | | 1 | 0 | 0 | . Additionally, as with the non-numeric features, we need to convert the non-numeric target label, &#39;income&#39; to numerical values for the learning algorithm to work. Since there are only two possible categories for this label (&quot;&lt;=50K&quot; and &quot;&gt;50K&quot;), we can avoid using one-hot encoding and simply encode these two categories as 0 and 1, respectively. In code cell below, you will need to implement the following: . Use pandas.get_dummies() to perform one-hot encoding on the &#39;features_log_minmax_transform&#39; data. | Convert the target label &#39;income_raw&#39; to numerical entries. Set records with &quot;&lt;=50K&quot; to 0 and records with &quot;&gt;50K&quot; to 1. | . | . # TODO: One-hot encode the &#39;features_log_minmax_transform&#39; data using pandas.get_dummies() features_final = pd.get_dummies(features_raw) # TODO: Encode the &#39;income_raw&#39; data to numerical values income = income_raw.apply(lambda x: 1 if x == &#39;&gt;50K&#39; else 0) # Print the number of features after one-hot encoding encoded = list(features_final.columns) print(&quot;{} total features after one-hot encoding.&quot;.format(len(encoded))) # Uncomment the following line to see the encoded feature names print(encoded) . 103 total features after one-hot encoding. [&#39;age&#39;, &#39;education-num&#39;, &#39;capital-gain&#39;, &#39;capital-loss&#39;, &#39;hours-per-week&#39;, &#39;workclass_ Federal-gov&#39;, &#39;workclass_ Local-gov&#39;, &#39;workclass_ Private&#39;, &#39;workclass_ Self-emp-inc&#39;, &#39;workclass_ Self-emp-not-inc&#39;, &#39;workclass_ State-gov&#39;, &#39;workclass_ Without-pay&#39;, &#39;education_level_ 10th&#39;, &#39;education_level_ 11th&#39;, &#39;education_level_ 12th&#39;, &#39;education_level_ 1st-4th&#39;, &#39;education_level_ 5th-6th&#39;, &#39;education_level_ 7th-8th&#39;, &#39;education_level_ 9th&#39;, &#39;education_level_ Assoc-acdm&#39;, &#39;education_level_ Assoc-voc&#39;, &#39;education_level_ Bachelors&#39;, &#39;education_level_ Doctorate&#39;, &#39;education_level_ HS-grad&#39;, &#39;education_level_ Masters&#39;, &#39;education_level_ Preschool&#39;, &#39;education_level_ Prof-school&#39;, &#39;education_level_ Some-college&#39;, &#39;marital-status_ Divorced&#39;, &#39;marital-status_ Married-AF-spouse&#39;, &#39;marital-status_ Married-civ-spouse&#39;, &#39;marital-status_ Married-spouse-absent&#39;, &#39;marital-status_ Never-married&#39;, &#39;marital-status_ Separated&#39;, &#39;marital-status_ Widowed&#39;, &#39;occupation_ Adm-clerical&#39;, &#39;occupation_ Armed-Forces&#39;, &#39;occupation_ Craft-repair&#39;, &#39;occupation_ Exec-managerial&#39;, &#39;occupation_ Farming-fishing&#39;, &#39;occupation_ Handlers-cleaners&#39;, &#39;occupation_ Machine-op-inspct&#39;, &#39;occupation_ Other-service&#39;, &#39;occupation_ Priv-house-serv&#39;, &#39;occupation_ Prof-specialty&#39;, &#39;occupation_ Protective-serv&#39;, &#39;occupation_ Sales&#39;, &#39;occupation_ Tech-support&#39;, &#39;occupation_ Transport-moving&#39;, &#39;relationship_ Husband&#39;, &#39;relationship_ Not-in-family&#39;, &#39;relationship_ Other-relative&#39;, &#39;relationship_ Own-child&#39;, &#39;relationship_ Unmarried&#39;, &#39;relationship_ Wife&#39;, &#39;race_ Amer-Indian-Eskimo&#39;, &#39;race_ Asian-Pac-Islander&#39;, &#39;race_ Black&#39;, &#39;race_ Other&#39;, &#39;race_ White&#39;, &#39;sex_ Female&#39;, &#39;sex_ Male&#39;, &#39;native-country_ Cambodia&#39;, &#39;native-country_ Canada&#39;, &#39;native-country_ China&#39;, &#39;native-country_ Columbia&#39;, &#39;native-country_ Cuba&#39;, &#39;native-country_ Dominican-Republic&#39;, &#39;native-country_ Ecuador&#39;, &#39;native-country_ El-Salvador&#39;, &#39;native-country_ England&#39;, &#39;native-country_ France&#39;, &#39;native-country_ Germany&#39;, &#39;native-country_ Greece&#39;, &#39;native-country_ Guatemala&#39;, &#39;native-country_ Haiti&#39;, &#39;native-country_ Holand-Netherlands&#39;, &#39;native-country_ Honduras&#39;, &#39;native-country_ Hong&#39;, &#39;native-country_ Hungary&#39;, &#39;native-country_ India&#39;, &#39;native-country_ Iran&#39;, &#39;native-country_ Ireland&#39;, &#39;native-country_ Italy&#39;, &#39;native-country_ Jamaica&#39;, &#39;native-country_ Japan&#39;, &#39;native-country_ Laos&#39;, &#39;native-country_ Mexico&#39;, &#39;native-country_ Nicaragua&#39;, &#39;native-country_ Outlying-US(Guam-USVI-etc)&#39;, &#39;native-country_ Peru&#39;, &#39;native-country_ Philippines&#39;, &#39;native-country_ Poland&#39;, &#39;native-country_ Portugal&#39;, &#39;native-country_ Puerto-Rico&#39;, &#39;native-country_ Scotland&#39;, &#39;native-country_ South&#39;, &#39;native-country_ Taiwan&#39;, &#39;native-country_ Thailand&#39;, &#39;native-country_ Trinadad&amp;Tobago&#39;, &#39;native-country_ United-States&#39;, &#39;native-country_ Vietnam&#39;, &#39;native-country_ Yugoslavia&#39;] . Shuffle and Split Data . Now all categorical variables have been converted into numerical features, and all numerical features have been normalized. As always, we will now split the data (both features and their labels) into training and test sets. 80% of the data will be used for training and 20% for testing. . Run the code cell below to perform this split. . # Import train_test_split from sklearn.cross_validation import train_test_split # Split the &#39;features&#39; and &#39;income&#39; data into training and testing sets X_train, X_test, y_train, y_test = train_test_split(features_final, income, test_size = 0.2, random_state = 0) # Show the results of the split print(&quot;Training set has {} samples.&quot;.format(X_train.shape[0])) print(&quot;Testing set has {} samples.&quot;.format(X_test.shape[0])) . Training set has 36177 samples. Testing set has 9045 samples. . . Evaluating Model Performance . In this section, we will investigate four different algorithms, and determine which is best at modeling the data. Three of these algorithms will be supervised learners of your choice, and the fourth algorithm is known as a naive predictor. . Metrics and the Naive Predictor . CharityML, equipped with their research, knows individuals that make more than $50,000 are most likely to donate to their charity. Because of this, *CharityML* is particularly interested in predicting who makes more than $50,000 accurately. It would seem that using accuracy as a metric for evaluating a particular model&#39;s performace would be appropriate. Additionally, identifying someone that does not make more than $50,000 as someone who does would be detrimental to *CharityML*, since they are looking to find individuals willing to donate. Therefore, a model&#39;s ability to precisely predict those that make more than $50,000 is more important than the model&#39;s ability to recall those individuals. We can use F-beta score as a metric that considers both precision and recall: . $$ F_{ beta} = (1 + beta^2) cdot frac{precision cdot recall}{ left( beta^2 cdot precision right) + recall} $$ . In particular, when $ beta = 0.5$, more emphasis is placed on precision. This is called the F$_{0.5}$ score (or F-score for simplicity). . Looking at the distribution of classes (those who make at most $50,000, and those who make more), it&#39;s clear most individuals do not make more than $50,000. This can greatly affect accuracy, since we could simply say &quot;this person does not make more than $50,000&quot; and generally be right, without ever looking at the data! Making such a statement would be called naive, since we have not considered any information to substantiate the claim. It is always important to consider the naive prediction for your data, to help establish a benchmark for whether a model is performing well. That been said, using that prediction would be pointless: If we predicted all people made less than $50,000, CharityML would identify no one as donors. . Note: Recap of accuracy, precision, recall . Accuracy measures how often the classifier makes the correct prediction. It’s the ratio of the number of correct predictions to the total number of predictions (the number of test data points). . Precision tells us what proportion of messages we classified as spam, actually were spam. It is a ratio of true positives(words classified as spam, and which are actually spam) to all positives(all words classified as spam, irrespective of whether that was the correct classificatio), in other words it is the ratio of . [True Positives/(True Positives + False Positives)] . Recall(sensitivity) tells us what proportion of messages that actually were spam were classified by us as spam. It is a ratio of true positives(words classified as spam, and which are actually spam) to all the words that were actually spam, in other words it is the ratio of . [True Positives/(True Positives + False Negatives)] . For classification problems that are skewed in their classification distributions like in our case, for example if we had a 100 text messages and only 2 were spam and the rest 98 weren&#39;t, accuracy by itself is not a very good metric. We could classify 90 messages as not spam(including the 2 that were spam but we classify them as not spam, hence they would be false negatives) and 10 as spam(all 10 false positives) and still get a reasonably good accuracy score. For such cases, precision and recall come in very handy. These two metrics can be combined to get the F1 score, which is weighted average(harmonic mean) of the precision and recall scores. This score can range from 0 to 1, with 1 being the best possible F1 score(we take the harmonic mean as we are dealing with ratios). . Question 1 - Naive Predictor Performace . If we chose a model that always predicted an individual made more than $50,000, what would that model&#39;s accuracy and F-score be on this dataset? You must use the code cell below and assign your results to &#39;accuracy&#39; and &#39;fscore&#39; to be used later. | . Please note that the the purpose of generating a naive predictor is simply to show what a base model without any intelligence would look like. In the real world, ideally your base model would be either the results of a previous model or could be based on a research paper upon which you are looking to improve. When there is no benchmark model set, getting a result better than random choice is a place you could start from. . HINT: . When we have a model that always predicts &#39;1&#39; (i.e. the individual makes more than 50k) then our model will have no True Negatives(TN) or False Negatives(FN) as we are not making any negative(&#39;0&#39; value) predictions. Therefore our Accuracy in this case becomes the same as our Precision(True Positives/(True Positives + False Positives)) as every prediction that we have made with value &#39;1&#39; that should have &#39;0&#39; becomes a False Positive; therefore our denominator in this case is the total number of records we have in total. | Our Recall score(True Positives/(True Positives + False Negatives)) in this setting becomes 1 as we have no False Negatives. | . &#39;&#39;&#39; TP = np.sum(income) # Counting the ones as this is the naive case. Note that &#39;income&#39; is the &#39;income_raw&#39; data encoded to numerical values done in the data preprocessing step. FP = income.count() - TP # Specific to the naive case TN = 0 # No predicted negatives in the naive case FN = 0 # No predicted negatives in the naive case &#39;&#39;&#39; # TODO: Calculate F-score using the formula above for beta = 0.5 accuracy = greater_percent TP = n_greater_50k FP = n_at_most_50k FN = 0 TN = 0 beta = 0.5 precision = TP*1. / (TP + FP) recall = TP*1. / (TP + FN) fscore = (1 + beta**2)*precision*recall/(beta**2 * precision+recall) # Print the results print(&quot;Naive Predictor: [Accuracy score: {:.4f}, F-score: {:.4f}]&quot;.format(accuracy, fscore)) . Naive Predictor: [Accuracy score: 24.7844, F-score: 0.2917] . Supervised Learning Models . The following are some of the supervised learning models that are currently available in scikit-learn that you may choose from: . Gaussian Naive Bayes (GaussianNB) | Decision Trees | Ensemble Methods (Bagging, AdaBoost, Random Forest, Gradient Boosting) | K-Nearest Neighbors (KNeighbors) | Stochastic Gradient Descent Classifier (SGDC) | Support Vector Machines (SVM) | Logistic Regression | . Question 2 - Model Application . List three of the supervised learning models above that are appropriate for this problem that you will test on the census data. For each model chosen . Describe one real-world application in industry where the model can be applied. | What are the strengths of the model; when does it perform well? | What are the weaknesses of the model; when does it perform poorly? | What makes this model a good candidate for the problem, given what you know about the data? | . HINT: . Structure your answer in the same format as above^, with 4 parts for each of the three models you pick. Please include references with your answer. . Answer: . Support Vector Machines (SVM): . Real World Example: . https://papers.nips.cc/paper/2179-mismatch-string-kernels-for-svm-protein-classification.pdf . It is a pretty common model in the biological science, for example used in protein classification. Here is the paper: . What are the strengths of the model Thanks to kernel feature it is very flexible, we can fit linear and non-linear data. When there are many features SVM is able to separate classes quickly and with less overfitting. . What are the weaknesses of the model The training time is slower than in other models. . What makes this model a good candidate for the problem, given what you know about the data? We have a small data set, just 40000 rows. Therefore, training time will be slower but not to the point of being a problem. SVM will also have less overfitting problems this high dimensional data. The possibility of choosing different kernels will allow us to train linear and non-linear models during hyper parameters tune, so we will have both possibilities covered. . Gaussian Naive Bayes (GaussianNB): . Real World Example: https://wiki.apache.org/spamassassin/BayesInSpamAssassin This model is used in one of the most famous AntiSpam products available, SpamAssassin. A part from a large list of fixed rules to classify spam essages, it used bayes classification. . What are the strengths of the model No overfitting problems. It is fast and performs well in small datasets. It has less parameters to tune, so the hyper parameter tune is faster. . What are the weaknesses of the model It assumes independence between every pair of features. . What makes this model a good candidate for the problem, given what you know about the data? It is one of the models that performs well when we don&#39;t have many training points, like in this particular case. We avoid overfitting, hyper parameter tune will be fast. Its weakness, independence assumption, is also rarely true in real world data. . Random Forest: . Real World Example: http://www.nature.com/modpathol/journal/v18/n4/full/3800322a.html A part from being one of most used models in Kaggle, one real life example we can find is in Tumor Classification: . What are the strengths of the model Very simple and easy to understand, we are not dealing with a black box. It runs multiple decission trees, that eliminates the overfitting problem. It will allow us to check feature imporance. They can represent non linear decision boundaries. It is not affected by noisy features. Lower variance. . What are the weaknesses of the model The bias of the model increases a bit in comparison with a single decision tree. Usually compensated by the lower variance. Depending on the number of trees it runs, the training time could increase a lot. . What makes this model a good candidate for the problem, given what you know about the data? It fits well linear and non linear models. We don&#39;t have many data points, so it will run fast and we can use a large number of trees. . Implementation - Creating a Training and Predicting Pipeline . To properly evaluate the performance of each model you&#39;ve chosen, it&#39;s important that you create a training and predicting pipeline that allows you to quickly and effectively train models using various sizes of training data and perform predictions on the testing data. Your implementation here will be used in the following section. In the code block below, you will need to implement the following: . Import fbeta_score and accuracy_score from sklearn.metrics. | Fit the learner to the sampled training data and record the training time. | Perform predictions on the test data X_test, and also on the first 300 training points X_train[:300]. Record the total prediction time. | . | Calculate the accuracy score for both the training subset and testing set. | Calculate the F-score for both the training subset and testing set. Make sure that you set the beta parameter! | . | . # TODO: Import two metrics from sklearn - fbeta_score and accuracy_score from sklearn.metrics import fbeta_score from sklearn.metrics import accuracy_score def train_predict(learner, sample_size, X_train, y_train, X_test, y_test): &#39;&#39;&#39; inputs: - learner: the learning algorithm to be trained and predicted on - sample_size: the size of samples (number) to be drawn from training set - X_train: features training set - y_train: income training set - X_test: features testing set - y_test: income testing set &#39;&#39;&#39; results = {} # TODO: Fit the learner to the training data using slicing with &#39;sample_size&#39; start = time() # Get start time learner = learner.fit(X_train[:sample_size],y_train[:sample_size]) end = time() # Get end time # TODO: Calculate the training time results[&#39;train_time&#39;] = end - start # TODO: Get the predictions on the test set, # then get predictions on the first 300 training samples start = time() # Get start time predictions_test = learner.predict(X_test) predictions_train = learner.predict(X_train[:300]) end = time() # Get end time # TODO: Calculate the total prediction time results[&#39;pred_time&#39;] = end - start # TODO: Compute accuracy on the first 300 training samples results[&#39;acc_train&#39;] = accuracy_score(y_train[:300],predictions_train) # TODO: Compute accuracy on test set results[&#39;acc_test&#39;] = accuracy_score(y_test,predictions_test) # TODO: Compute F-score on the the first 300 training samples results[&#39;f_train&#39;] = fbeta_score(y_train[:300],predictions_train,beta=0.5) # TODO: Compute F-score on the test set results[&#39;f_test&#39;] = fbeta_score(y_test,predictions_test,beta=0.5) # Success print (&quot;{} trained on {} samples.&quot;.format(learner.__class__.__name__, sample_size)) # Return the results return results . Implementation: Initial Model Evaluation . In the code cell, you will need to implement the following: . Import the three supervised learning models you&#39;ve discussed in the previous section. | Initialize the three models and store them in &#39;clf_A&#39;, &#39;clf_B&#39;, and &#39;clf_C&#39;. Use a &#39;random_state&#39; for each model you use, if provided. | Note: Use the default settings for each model — you will tune one specific model in a later section. | . | Calculate the number of records equal to 1%, 10%, and 100% of the training data. Store those values in &#39;samples_1&#39;, &#39;samples_10&#39;, and &#39;samples_100&#39; respectively. | . | . Note: Depending on which algorithms you chose, the following implementation may take some time to run! . # TODO: Import the three supervised learning models from sklearn from sklearn.ensemble import RandomForestClassifier from sklearn.naive_bayes import GaussianNB from sklearn import svm # TODO: Initialize the three models clf_A = svm.SVC(random_state=50) clf_B = GaussianNB() clf_C = RandomForestClassifier(random_state=50) # TODO: Calculate the number of samples for 1%, 10%, and 100% of the training data samples_1 = int(len(X_train)*0.01) samples_10 = int(len(X_train)*0.1) samples_100 = int(len(X_train)) # Collect results on the learners results = {} for clf in [clf_A, clf_B, clf_C]: clf_name = clf.__class__.__name__ results[clf_name] = {} for i, samples in enumerate([samples_1, samples_10, samples_100]): results[clf_name][i] = train_predict(clf, samples, X_train, y_train, X_test, y_test) # Run metrics visualization for the three supervised learning models chosen vs.evaluate(results, accuracy, fscore) . /opt/conda/lib/python3.6/site-packages/sklearn/metrics/classification.py:1135: UndefinedMetricWarning: F-score is ill-defined and being set to 0.0 due to no predicted samples. &#39;precision&#39;, &#39;predicted&#39;, average, warn_for) . SVC trained on 361 samples. SVC trained on 3617 samples. SVC trained on 36177 samples. GaussianNB trained on 361 samples. GaussianNB trained on 3617 samples. GaussianNB trained on 36177 samples. RandomForestClassifier trained on 361 samples. RandomForestClassifier trained on 3617 samples. RandomForestClassifier trained on 36177 samples. . . Improving Results . In this final section, you will choose from the three supervised learning models the best model to use on the student data. You will then perform a grid search optimization for the model over the entire training set (X_train and y_train) by tuning at least one parameter to improve upon the untuned model&#39;s F-score. . Question 3 - Choosing the Best Model . Based on the evaluation you performed earlier, in one to two paragraphs, explain to CharityML which of the three models you believe to be most appropriate for the task of identifying individuals that make more than $50,000. | . HINT: Look at the graph at the bottom left from the cell above(the visualization created by vs.evaluate(results, accuracy, fscore)) and check the F score for the testing set when 100% of the training set is used. Which model has the highest score? Your answer should include discussion of the: . metrics - F score on the testing when 100% of the training data is used, | prediction/training time | the algorithm&#39;s suitability for the data. | . Answer: From the three models I have evaluated, we can discard Naives Bayes. It has a pretty log F-score and precision. It is actually fast doing training and prediction, but those low scores shows that it is clearly not an option. . RandomForest shows a really high f-score in the training set, nearly 1. While on testing set it gets down to 0.6. This model seems to be overfitting. . SVM is slower doing the training, but we don&#39;t have many rows anyway. The score and f-score on testing set is similar to RandomForest, but without overfitting problem. Therefore, SVM is the choosen model. . Question 4 - Describing the Model in Layman&#39;s Terms . In one to two paragraphs, explain to CharityML, in layman&#39;s terms, how the final model chosen is supposed to work. Be sure that you are describing the major qualities of the model, such as how the model is trained and how the model makes a prediction. Avoid using advanced mathematical jargon, such as describing equations. | . HINT: . When explaining your model, if using external resources please include all citations. . Answer: . SVM (Support Vector Machine) is a representation of the linear model: . The method works by first training the model, then using the trained model to predict. . Training is done by reading census data from each individual. For example, marital status, ocuppation, age, sex and so on. That information is used to generate the function that separates the data between those who earn more then 50k and those who earn less. The idea is to find a line that best separates both groups, with the largest margin possible. It is not always possible to separate the data with a straight line. In those cases more complex functions are needed. After we train the model, the best possible function that separates the data is created. Now, the model can use that function to find what would be the salary of a person never seen before, based on his/her census data. The model will place a point in the graph. Then, to predict the salary it just needs to check the position of that point. Taking the first graph as reference, depending if the new point is on the left or the right, it will be a &quot;star&quot; or a &quot;circle&quot;. In our case, it will be &quot;&gt;50k&quot; or &quot;&lt;50k&quot;. . Implementation: Model Tuning . Fine tune the chosen model. Use grid search (GridSearchCV) with at least one important parameter tuned with at least 3 different values. You will need to use the entire training set for this. In the code cell below, you will need to implement the following: . Import sklearn.grid_search.GridSearchCV and sklearn.metrics.make_scorer. | Initialize the classifier you&#39;ve chosen and store it in clf. Set a random_state if one is available to the same state you set before. | . | Create a dictionary of parameters you wish to tune for the chosen model. Example: parameters = {&#39;parameter&#39; : [list of values]}. | Note: Avoid tuning the max_features parameter of your learner if that parameter is available! | . | Use make_scorer to create an fbeta_score scoring object (with $ beta = 0.5$). | Perform grid search on the classifier clf using the &#39;scorer&#39;, and store it in grid_obj. | Fit the grid search object to the training data (X_train, y_train), and store it in grid_fit. | . Note: Depending on the algorithm chosen and the parameter list, the following implementation may take some time to run! . # TODO: Import &#39;GridSearchCV&#39;, &#39;make_scorer&#39;, and any other necessary libraries from sklearn import svm from sklearn import grid_search from sklearn.metrics import make_scorer # TODO: Initialize the classifier clf = svm.SVC() # TODO: Create the parameters list you wish to tune parameters = {&#39;C&#39;: [1,2,3]} # TODO: Make an fbeta_score scoring object scorer = make_scorer(fbeta_score, beta=0.5) # TODO: Perform grid search on the classifier using &#39;scorer&#39; as the scoring method grid_obj = grid_search.GridSearchCV(clf, parameters, scoring=scorer) # TODO: Fit the grid search object to the training data and find the optimal parameters grid_fit = grid_obj.fit(X_train, y_train) # Get the estimator best_clf = grid_fit.best_estimator_ # Make predictions using the unoptimized and model predictions = (clf.fit(X_train, y_train)).predict(X_test) best_predictions = best_clf.predict(X_test) # Report the before-and-afterscores print(&quot;Unoptimized model n&quot;) print(&quot;Accuracy score on testing data: {:.4f}&quot;.format(accuracy_score(y_test, predictions))) print(&quot;F-score on testing data: {:.4f}&quot;.format(fbeta_score(y_test, predictions, beta = 0.5))) print(&quot; nOptimized Model n&quot;) print(&quot;Final accuracy score on the testing data: {:.4f}&quot;.format(accuracy_score(y_test, best_predictions))) print(&quot;Final F-score on the testing data: {:.4f}&quot;.format(fbeta_score(y_test, best_predictions, beta = 0.5))) . /opt/conda/lib/python3.6/site-packages/sklearn/grid_search.py:42: DeprecationWarning: This module was deprecated in version 0.18 in favor of the model_selection module into which all the refactored classes and functions are moved. This module will be removed in 0.20. DeprecationWarning) . Unoptimized model Accuracy score on testing data: 0.8371 F-score on testing data: 0.6745 Optimized Model Final accuracy score on the testing data: 0.8371 Final F-score on the testing data: 0.6745 . Question 5 - Final Model Evaluation . What is your optimized model&#39;s accuracy and F-score on the testing data? | Are these scores better or worse than the unoptimized model? | How do the results from your optimized model compare to the naive predictor benchmarks you found earlier in Question 1?_ | . Note: Fill in the table below with your results, and then provide discussion in the Answer box. . Results: . Metric Unoptimized Model Optimized Model . Accuracy Score | 0.8371 | 0.837 | . F-score | 0.6745 | 0.6745 | . Answer: . The scores we get are a bit better. We have higher accuracy and F-Score. That means that our model will be able do better predicting the correct labels and reducing the changes of false positives at the same time. If we compare them with the naive predictor the difference is much larger, making our Benchmark Predictor almost useless even if we compare it with the Random Forest Unoptimized Model. . . Feature Importance . An important task when performing supervised learning on a dataset like the census data we study here is determining which features provide the most predictive power. By focusing on the relationship between only a few crucial features and the target label we simplify our understanding of the phenomenon, which is most always a useful thing to do. In the case of this project, that means we wish to identify a small number of features that most strongly predict whether an individual makes at most or more than $50,000. . Choose a scikit-learn classifier (e.g., adaboost, random forests) that has a feature_importance_ attribute, which is a function that ranks the importance of features according to the chosen classifier. In the next python cell fit this classifier to training set and use this attribute to determine the top 5 most important features for the census dataset. . Question 6 - Feature Relevance Observation . When Exploring the Data, it was shown there are thirteen available features for each individual on record in the census data. Of these thirteen records, which five features do you believe to be most important for prediction, and in what order would you rank them and why? . Answer: age occupation education_level workclass hours-per-week Age is one of the most importants. Age means experience, better positions in the company, getting promotions, so more age could mean more salary too. . The salary also depends on the occupation, so that makes it the second place. For two people on same occupation, the older one will probably get higher salary because of the previous experience and role . In third place there should be education_level, because the education you get doesn&#39;t always predict your future job or the salary you could get. Having a particular education level could help you to get to a good occupation, so that is why education_level goes to third place. . In fourth place a category similar to occupation, workclass. Depending on which group the employee is the salary could vary. For example, a Federal-gov could make more than a Self-emp-inc. But it doesn&#39;t always have to the the case. Since the separation of class and salary (mostly because of the classes in the data set) is not as well defined as occupation, this one goes to 4th and occupation stays in 2nd. . Finally, the number of hours-per-week can increase the salary received if those hours are paid as an extra, something that doesn&#39;t happen in all situations but could make a difference. . Implementation - Extracting Feature Importance . Choose a scikit-learn supervised learning algorithm that has a feature_importance_ attribute availble for it. This attribute is a function that ranks the importance of each feature when making predictions based on the chosen algorithm. . In the code cell below, you will need to implement the following: . Import a supervised learning model from sklearn if it is different from the three used earlier. | Train the supervised model on the entire training set. | Extract the feature importances using &#39;.feature_importances_&#39;. | . # TODO: Import a supervised learning model that has &#39;feature_importances_&#39; from sklearn.ensemble import AdaBoostClassifier # TODO: Train the supervised model on the training set model = AdaBoostClassifier() model.fit(X_train, y_train) # TODO: Extract the feature importances importances = model.feature_importances_ # Plot vs.feature_plot(importances, X_train, y_train) . Question 7 - Extracting Feature Importance . Observe the visualization created above which displays the five most relevant features for predicting if an individual makes at most or above $50,000. . How do these five features compare to the five features you discussed in Question 6? | If you were close to the same answer, how does this visualization confirm your thoughts? | If you were not close, why do you think these features are more relevant? | . Answer: . If we count education-num as a variation of education-level, I got 3 of 5. Those that I didn&#39;t take in account, capital-loss and capital-gain were good ones that I forgot. The capital of a person, meassured by what are the incomes and expenses, could probably describe the salary that person gets. So, those two are pretty good features to take in account. . It is important to mention that our choosen model has been SVM, but it doesn&#39;t have the possibility to extract the feature importance. Therefore, this data may not be the best one for our model. We need to test it to see if it does better or not. . Feature Selection . How does a model perform if we only use a subset of all the available features in the data? With less features required to train, the expectation is that training and prediction time is much lower — at the cost of performance metrics. From the visualization above, we see that the top five most important features contribute more than half of the importance of all features present in the data. This hints that we can attempt to reduce the feature space and simplify the information required for the model to learn. The code cell below will use the same optimized model you found earlier, and train it on the same training set with only the top five important features. . # Import functionality for cloning a model from sklearn.base import clone # Reduce the feature space X_train_reduced = X_train[X_train.columns.values[(np.argsort(importances)[::-1])[:5]]] X_test_reduced = X_test[X_test.columns.values[(np.argsort(importances)[::-1])[:5]]] # Train on the &quot;best&quot; model found from grid search earlier clf = (clone(best_clf)).fit(X_train_reduced, y_train) # Make new predictions reduced_predictions = clf.predict(X_test_reduced) # Report scores from the final model using both versions of data print(&quot;Final Model trained on full data n&quot;) print(&quot;Accuracy on testing data: {:.4f}&quot;.format(accuracy_score(y_test, best_predictions))) print(&quot;F-score on testing data: {:.4f}&quot;.format(fbeta_score(y_test, best_predictions, beta = 0.5))) print(&quot; nFinal Model trained on reduced data n&quot;) print(&quot;Accuracy on testing data: {:.4f}&quot;.format(accuracy_score(y_test, reduced_predictions))) print(&quot;F-score on testing data: {:.4f}&quot;.format(fbeta_score(y_test, reduced_predictions, beta = 0.5))) . Final Model trained on full data Accuracy on testing data: 0.8371 F-score on testing data: 0.6745 Final Model trained on reduced data Accuracy on testing data: 0.7992 F-score on testing data: 0.5493 . Question 8 - Effects of Feature Selection . How does the final model&#39;s F-score and accuracy score on the reduced data using only five features compare to those same scores when all features are used? | If training time was a factor, would you consider using the reduced data as your training set? | . Answer: . Training time is a factor. SVM is much slower than the other models and that&#39;s make hyperparameter optimization slower than expected. Would be good to reduce the data in the training set, for example doing a .6 split instead of .2. . Also, the dataset with reduced number of features performs worse than using the full data. Accuracy and f-score is lower. Something normal taking in account that we used Adaboost with DecissionTree as base predictor to extract feature importances and then SVM to do the actual training. It could be possible to use SVM as base predictor, but taking in account the time it takes, could be too slow. . Note:Once you have completed all of the code implementations and successfully answered each question above, you may finalize your work by exporting the iPython Notebook as an HTML document. You can do this by using the menu above and navigating to File -&gt; Download as -&gt; HTML (.html). Include the finished document along with this notebook as your submission. . Before You Submit . You will also need run the following in order to convert the Jupyter notebook into HTML, so that your submission will include both files. . !!jupyter nbconvert *.ipynb . [&#39;[NbConvertApp] Converting notebook finding_donors.ipynb to html&#39;, &#39;[NbConvertApp] Writing 496082 bytes to finding_donors.html&#39;] .",
            "url": "https://manisaiprasad.github.io/notes/2020/04/09/finding_donors.html",
            "relUrl": "/2020/04/09/finding_donors.html",
            "date": " • Apr 9, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "Implementing the Gradient Descent Algorithm",
            "content": "import matplotlib.pyplot as plt import numpy as np import pandas as pd #Some helper functions for plotting and drawing lines def plot_points(X, y): admitted = X[np.argwhere(y==1)] rejected = X[np.argwhere(y==0)] plt.scatter([s[0][0] for s in rejected], [s[0][1] for s in rejected], s = 25, color = &#39;blue&#39;, edgecolor = &#39;k&#39;) plt.scatter([s[0][0] for s in admitted], [s[0][1] for s in admitted], s = 25, color = &#39;red&#39;, edgecolor = &#39;k&#39;) def display(m, b, color=&#39;g--&#39;): plt.xlim(-0.05,1.05) plt.ylim(-0.05,1.05) x = np.arange(-10, 10, 0.1) plt.plot(x, m*x+b, color) . Reading and plotting the data . data = pd.read_csv(&#39;data.csv&#39;, header=None) X = np.array(data[[0,1]]) y = np.array(data[2]) plot_points(X,y) plt.show() . TODO: Implementing the basic functions . Here is your turn to shine. Implement the following formulas, as explained in the text. . Sigmoid activation function | . $$ sigma(x) = frac{1}{1+e^{-x}}$$ . Output (prediction) formula | . $$ hat{y} = sigma(w_1 x_1 + w_2 x_2 + b)$$ . Error function | . $$Error(y, hat{y}) = - y log( hat{y}) - (1-y) log(1- hat{y})$$ . The function that updates the weights | . $$ w_i longrightarrow w_i + alpha (y - hat{y}) x_i$$ . $$ b longrightarrow b + alpha (y - hat{y})$$ . # Activation (sigmoid) function def sigmoid(x): return 1 / (1 + np.exp(-x)) def output_formula(features, weights, bias): return sigmoid(np.dot(features, weights) + bias) def error_formula(y, output): return - y*np.log(output) - (1 - y) * np.log(1-output) def update_weights(x, y, weights, bias, learnrate): output = output_formula(x, weights, bias) d_error = y - output weights += learnrate * d_error * x bias += learnrate * d_error return weights, bias . Training function . This function will help us iterate the gradient descent algorithm through all the data, for a number of epochs. It will also plot the data, and some of the boundary lines obtained as we run the algorithm. . np.random.seed(44) epochs = 100 learnrate = 0.01 def train(features, targets, epochs, learnrate, graph_lines=False): errors = [] n_records, n_features = features.shape last_loss = None weights = np.random.normal(scale=1 / n_features**.5, size=n_features) bias = 0 for e in range(epochs): del_w = np.zeros(weights.shape) for x, y in zip(features, targets): output = output_formula(x, weights, bias) error = error_formula(y, output) weights, bias = update_weights(x, y, weights, bias, learnrate) # Printing out the log-loss error on the training set out = output_formula(features, weights, bias) loss = np.mean(error_formula(targets, out)) errors.append(loss) if e % (epochs / 10) == 0: print(&quot; n========== Epoch&quot;, e,&quot;==========&quot;) if last_loss and last_loss &lt; loss: print(&quot;Train loss: &quot;, loss, &quot; WARNING - Loss Increasing&quot;) else: print(&quot;Train loss: &quot;, loss) last_loss = loss predictions = out &gt; 0.5 accuracy = np.mean(predictions == targets) print(&quot;Accuracy: &quot;, accuracy) if graph_lines and e % (epochs / 100) == 0: display(-weights[0]/weights[1], -bias/weights[1]) # Plotting the solution boundary plt.title(&quot;Solution boundary&quot;) display(-weights[0]/weights[1], -bias/weights[1], &#39;black&#39;) # Plotting the data plot_points(features, targets) plt.show() # Plotting the error plt.title(&quot;Error Plot&quot;) plt.xlabel(&#39;Number of epochs&#39;) plt.ylabel(&#39;Error&#39;) plt.plot(errors) plt.show() . Time to train the algorithm! . When we run the function, we&#39;ll obtain the following: . 10 updates with the current training loss and accuracy | A plot of the data and some of the boundary lines obtained. The final one is in black. Notice how the lines get closer and closer to the best fit, as we go through more epochs. | A plot of the error function. Notice how it decreases as we go through more epochs. | . train(X, y, epochs, learnrate, True) . ========== Epoch 0 ========== Train loss: 0.713584519538 Accuracy: 0.4 ========== Epoch 10 ========== Train loss: 0.622583521045 Accuracy: 0.59 ========== Epoch 20 ========== Train loss: 0.554874408367 Accuracy: 0.74 ========== Epoch 30 ========== Train loss: 0.501606141872 Accuracy: 0.84 ========== Epoch 40 ========== Train loss: 0.459333464186 Accuracy: 0.86 ========== Epoch 50 ========== Train loss: 0.425255434335 Accuracy: 0.93 ========== Epoch 60 ========== Train loss: 0.397346157167 Accuracy: 0.93 ========== Epoch 70 ========== Train loss: 0.374146976524 Accuracy: 0.93 ========== Epoch 80 ========== Train loss: 0.354599733682 Accuracy: 0.94 ========== Epoch 90 ========== Train loss: 0.337927365888 Accuracy: 0.94 .",
            "url": "https://manisaiprasad.github.io/notes/2020/02/20/GradientDescent.html",
            "relUrl": "/2020/02/20/GradientDescent.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post4": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://manisaiprasad.github.io/notes/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  
    
        ,"post5": {
            "title": "Self-Driving Car Engineer Nanodegree",
            "content": ". Step 0: Load The Data . # Load pickled data import pickle # TODO: Fill this in based on where you saved the training and testing data training_file = &quot;train.p&quot; validation_file= &quot;valid.p&quot; testing_file = &quot;test.p&quot; with open(training_file, mode=&#39;rb&#39;) as f: train = pickle.load(f) with open(validation_file, mode=&#39;rb&#39;) as f: valid = pickle.load(f) with open(testing_file, mode=&#39;rb&#39;) as f: test = pickle.load(f) X_train, y_train = train[&#39;features&#39;], train[&#39;labels&#39;] X_valid, y_valid = valid[&#39;features&#39;], valid[&#39;labels&#39;] X_test, y_test = test[&#39;features&#39;], test[&#39;labels&#39;] . . Step 1: Dataset Summary &amp; Exploration . The pickled data is a dictionary with 4 key/value pairs: . &#39;features&#39; is a 4D array containing raw pixel data of the traffic sign images, (num examples, width, height, channels). | &#39;labels&#39; is a 1D array containing the label/class id of the traffic sign. The file signnames.csv contains id -&gt; name mappings for each id. | &#39;sizes&#39; is a list containing tuples, (width, height) representing the the original width and height the image. | &#39;coords&#39; is a list containing tuples, (x1, y1, x2, y2) representing coordinates of a bounding box around the sign in the image. THESE COORDINATES ASSUME THE ORIGINAL IMAGE. THE PICKLED DATA CONTAINS RESIZED VERSIONS (32 by 32) OF THESE IMAGES | . Complete the basic data summary below. Use python, numpy and/or pandas methods to calculate the data summary rather than hard coding the results. For example, the pandas shape method might be useful for calculating some of the summary results. . Provide a Basic Summary of the Data Set Using Python, Numpy and/or Pandas . ### Replace each question mark with the appropriate value. ### Use python, pandas or numpy methods rather than hard coding the results import numpy as np # Number of training examples n_train = X_train.shape[0] # Number of testing examples. n_test = X_test.shape[0] # What&#39;s the shape of an traffic sign image? image_shape = X_train.shape[1:] # How many unique classes/labels there are in the dataset. n_classes = len(np.unique(y_train)) print(&quot;Number of training examples =&quot;, n_train) print(&quot;Number of testing examples =&quot;, n_test) print(&quot;Image data shape =&quot;, image_shape) print(&quot;Number of classes =&quot;, n_classes) . Number of training examples = 34799 Number of testing examples = 12630 Image data shape = (32, 32, 3) Number of classes = 43 . Include an exploratory visualization of the dataset . Visualize the German Traffic Signs Dataset using the pickled file(s). This is open ended, suggestions include: plotting traffic sign images, plotting the count of each sign, etc. . The Matplotlib examples and gallery pages are a great resource for doing visualizations in Python. . NOTE: It&#39;s recommended you start with something simple first. If you wish to do more, come back to it after you&#39;ve completed the rest of the sections. . ### Data exploration visualization code goes here. ### Feel free to use as many code cells as needed. import matplotlib.pyplot as plt # Visualizations will be shown in the notebook. %matplotlib inline import random import csv def plot_figures(figures, nrows = 1, ncols=1, labels=None): fig, axs = plt.subplots(ncols=ncols, nrows=nrows, figsize=(12, 14)) axs = axs.ravel() for index, title in zip(range(len(figures)), figures): axs[index].imshow(figures[title], plt.gray()) if(labels != None): axs[index].set_title(labels[index]) else: axs[index].set_title(title) axs[index].set_axis_off() plt.tight_layout() name_values = np.genfromtxt(&#39;signnames.csv&#39;, skip_header=1, dtype=[(&#39;myint&#39;,&#39;i8&#39;), (&#39;mysring&#39;,&#39;S55&#39;)], delimiter=&#39;,&#39;) number_to_stop = 8 figures = {} labels = {} for i in range(number_to_stop): index = random.randint(0, n_train-1) labels[i] = name_values[y_train[index]][1].decode(&#39;ascii&#39;) # print(name_values[y_train[index]][1].decode(&#39;ascii&#39;)) figures[i] = X_train[index] plot_figures(figures, 4, 2, labels) . Personal Note . Data appears good although occasionally for some reason the image cannot be displayed properly. Maybe bad images in the dataset? . unique_train, counts_train = np.unique(y_train, return_counts=True) plt.bar(unique_train, counts_train) plt.grid() plt.title(&quot;Train Dataset Sign Counts&quot;) plt.show() unique_test, counts_test = np.unique(y_test, return_counts=True) plt.bar(unique_test, counts_test) plt.grid() plt.title(&quot;Test Dataset Sign Counts&quot;) plt.show() unique_valid, counts_valid = np.unique(y_valid, return_counts=True) plt.bar(unique_valid, counts_valid) plt.grid() plt.title(&quot;Valid Dataset Sign Counts&quot;) plt.show() . Personal Note . Data appears uniform although each part of the dataset doesn&#39;t have equal sizes. This should be ok though, but something to keep in mind if I run into problems detecting specific signs that should be classified out of the 43. . # yuv = np.array([[1, 0, 1.13983], [1, -0.39465, -0.58060], [1, 2.03211, 0]]) # X_train_yuv = X_train*yuv # from skimage import color # X_train_yuv = color.convert_colorspace(X_train, &#39;RGB&#39;, &#39;YUV&#39;) # X_train_yuv = color.rgb2yuv(X_train) # X_train_yuv = color.rgb2yuv(X_train) # X_train_y = X_train_yuv[0:,:,] # number_to_stop = 8 # figures = {} # for i in range(number_to_stop): # index = random.randint(0, n_train-1) # print(name_values[y_train[index]]) # figures[y_train[index]] = X_train_yuv[index] # plot_figures(figures, 2, 4) # print(X_train_y) # X_train = X_train_yuv . Personal Note . I tried to use YUV, but kind of ran out of time. In the paper recommended by the class, from Pierre Sermanet and Yann LeCun, they said they used it. I am still curious exactly how they did it. . . Step 2: Design and Test a Model Architecture . Design and implement a deep learning model that learns to recognize traffic signs. Train and test your model on the German Traffic Sign Dataset. . There are various aspects to consider when thinking about this problem: . Neural network architecture | Play around preprocessing techniques (normalization, rgb to grayscale, etc) | Number of examples per label (some have more than others). | Generate fake data. | . Here is an example of a published baseline model on this problem. It&#39;s not required to be familiar with the approach used in the paper but, it&#39;s good practice to try to read papers like these. . NOTE: The LeNet-5 implementation shown in the classroom at the end of the CNN lesson is a solid starting point. You&#39;ll have to change the number of classes and possibly the preprocessing, but aside from that it&#39;s plug and play! . Pre-process the Data Set (normalization, grayscale, etc.) . Use the code cell (or multiple code cells, if necessary) to implement the first step of your project. . ### Preprocess the data here. Preprocessing steps could include normalization, converting to grayscale, etc. ### Feel free to use as many code cells as needed. import tensorflow as tf from tensorflow.contrib.layers import flatten from math import ceil from sklearn.utils import shuffle # Convert to grayscale X_train_rgb = X_train X_train_gray = np.sum(X_train/3, axis=3, keepdims=True) X_test_rgb = X_test X_test_gray = np.sum(X_test/3, axis=3, keepdims=True) X_valid_rgb = X_valid X_valid_gray = np.sum(X_valid/3, axis=3, keepdims=True) print(X_train_rgb.shape) print(X_train_gray.shape) print(X_test_rgb.shape) print(X_test_gray.shape) . (34799, 32, 32, 3) (34799, 32, 32, 1) (12630, 32, 32, 3) (12630, 32, 32, 1) . # X_train = tf.image.rgb_to_grayscale(X_train, name=None) X_train = X_train_gray X_test = X_test_gray X_valid = X_valid_gray . image_depth_channels = X_train.shape[3] # print(image_depth_channels) number_to_stop = 8 figures = {} random_signs = [] for i in range(number_to_stop): index = random.randint(0, n_train-1) labels[i] = name_values[y_train[index]][1].decode(&#39;ascii&#39;) figures[i] = X_train[index].squeeze() random_signs.append(index) # print(random_signs) plot_figures(figures, 4, 2, labels) . import cv2 more_X_train = [] more_y_train = [] more2_X_train = [] more2_y_train = [] new_counts_train = counts_train for i in range(n_train): if(new_counts_train[y_train[i]] &lt; 3000): for j in range(3): dx, dy = np.random.randint(-1.7, 1.8, 2) M = np.float32([[1, 0, dx], [0, 1, dy]]) dst = cv2.warpAffine(X_train[i], M, (X_train[i].shape[0], X_train[i].shape[1])) dst = dst[:,:,None] more_X_train.append(dst) more_y_train.append(y_train[i]) random_higher_bound = random.randint(27, 32) random_lower_bound = random.randint(0, 5) points_one = np.float32([[0,0],[32,0],[0,32],[32,32]]) points_two = np.float32([[0, 0], [random_higher_bound, random_lower_bound], [random_lower_bound, 32],[32, random_higher_bound]]) M = cv2.getPerspectiveTransform(points_one, points_two) dst = cv2.warpPerspective(X_train[i], M, (32,32)) more2_X_train.append(dst) more2_y_train.append(y_train[i]) tilt = random.randint(-12, 12) M = cv2.getRotationMatrix2D((X_train[i].shape[0]/2, X_train[i].shape[1]/2), tilt, 1) dst = cv2.warpAffine(X_train[i], M, (X_train[i].shape[0], X_train[i].shape[1])) more2_X_train.append(dst) more2_y_train.append(y_train[i]) new_counts_train[y_train[i]] += 2 more_X_train = np.array(more_X_train) more_y_train = np.array(more_y_train) X_train = np.concatenate((X_train, more_X_train), axis=0) y_train = np.concatenate((y_train, more_y_train), axis=0) more2_X_train = np.array(more_X_train) more2_y_train = np.array(more_y_train) more2_X_train = np.reshape(more2_X_train, (np.shape(more2_X_train)[0], 32, 32, 1)) X_train = np.concatenate((X_train, more2_X_train), axis=0) y_train = np.concatenate((y_train, more2_y_train), axis=0) X_train = np.concatenate((X_train, X_valid), axis=0) y_train = np.concatenate((y_train, y_valid), axis=0) . figures1 = {} labels = {} figures1[0] = X_train[n_train+1].squeeze() labels[0] = y_train[n_train+1] figures1[1] = X_train[0].squeeze() labels[1] = y_train[0] plot_figures(figures1, 1, 2, labels) . from sklearn.model_selection import train_test_split X_train, X_valid, y_train, y_valid = train_test_split(X_train, y_train, test_size=0.2, random_state=0) print(&quot;New Dataset Size : {}&quot;.format(X_train.shape[0])) unique, counts = np.unique(y_train, return_counts=True) plt.bar(unique, counts) plt.grid() plt.title(&quot;Train Dataset Sign Counts&quot;) plt.show() unique, counts = np.unique(y_test, return_counts=True) plt.bar(unique, counts) plt.grid() plt.title(&quot;Test Dataset Sign Counts&quot;) plt.show() unique, counts = np.unique(y_valid, return_counts=True) plt.bar(unique, counts) plt.grid() plt.title(&quot;Valid Dataset Sign Counts&quot;) plt.show() . New Dataset Size : 89860 . def normalize(im): return -np.log(1/((1 + im)/257) - 1) # X_train_normalized = normalize(X_train) # X_test_normalized = normalize(X_test) X_train_normalized = X_train/127.5-1 X_test_normalized = X_test/127.5-1 number_to_stop = 8 figures = {} count = 0 for i in random_signs: labels[count] = name_values[y_train[i]][1].decode(&#39;ascii&#39;) figures[count] = X_train_normalized[i].squeeze() count += 1; plot_figures(figures, 4, 2, labels) . X_train = X_train_normalized X_test = X_test_normalized . Model Architecture . def conv2d(x, W, b, strides=1): x = tf.nn.conv2d(x, W, strides=[1, strides, strides, 1], padding=&#39;VALID&#39;) x = tf.nn.bias_add(x, b) print(x.shape) return tf.nn.relu(x) def LeNet(x): mu = 0 sigma = 0.1 W_one = tf.Variable(tf.truncated_normal(shape=(5, 5, image_depth_channels, 6), mean = mu, stddev = sigma)) b_one = tf.Variable(tf.zeros(6)) layer_one = conv2d(x, W_one, b_one, 1) layer_one = tf.nn.max_pool(layer_one, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding=&#39;VALID&#39;) print(layer_one.shape) print() W_two = tf.Variable(tf.truncated_normal(shape=(5, 5, 6, 16), mean = mu, stddev = sigma)) b_two = tf.Variable(tf.zeros(16)) layer_two = conv2d(layer_one, W_two, b_two, 1) layer_two = tf.nn.max_pool(layer_two, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding=&#39;VALID&#39;) print(layer_two.shape) print() W_two_a = tf.Variable(tf.truncated_normal(shape=(5, 5, 16, 412), mean = mu, stddev = sigma)) b_two_a = tf.Variable(tf.zeros(412)) layer_two_a = conv2d(layer_two, W_two_a, b_two_a, 1) # If a well known architecture was chosen: * What architecture was chosen? * Why did you believe it would be relevant to the traffic sign application? * How does the final model&#39;s accuracy on the training, validation and test set provide evidence that the model is working well?layer_two_a = tf.nn.max_pool(layer_two_a, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding=&#39;VALID&#39;) print(layer_two_a.shape) print() flat = flatten(layer_two_a) W_three = tf.Variable(tf.truncated_normal(shape=(412, 122), mean = mu, stddev = sigma)) b_three = tf.Variable(tf.zeros(122)) layer_three = tf.nn.relu(tf.nn.bias_add(tf.matmul(flat, W_three), b_three)) layer_three = tf.nn.dropout(layer_three, keep_prob) W_four = tf.Variable(tf.truncated_normal(shape=(122, 84), mean = mu, stddev = sigma)) b_four = tf.Variable(tf.zeros(84)) layer_four = tf.nn.relu(tf.nn.bias_add(tf.matmul(layer_three, W_four), b_four)) layer_four = tf.nn.dropout(layer_four, keep_prob) W_five = tf.Variable(tf.truncated_normal(shape=(84, 43), mean = mu, stddev = sigma)) b_five = tf.Variable(tf.zeros(43)) layer_five = tf.nn.bias_add(tf.matmul(layer_four, W_five), b_five) return layer_five x = tf.placeholder(tf.float32, (None, 32, 32, image_depth_channels)) y = tf.placeholder(tf.int32, (None)) one_hot_y = tf.one_hot(y, 43) keep_prob = tf.placeholder(tf.float32) . Train, Validate and Test the Model . A validation set can be used to assess how well the model is performing. A low accuracy on the training and validation sets imply underfitting. A high accuracy on the test set but low accuracy on the validation set implies overfitting. . ### Train your model here. ### Calculate and report the accuracy on the training and validation set. ### Once a final model architecture is selected, ### the accuracy on the test set should be calculated and reported as well. ### Feel free to use as many code cells as needed. EPOCHS = 27 BATCH_SIZE = 156 rate = 0.00097 logits = LeNet(x) cross_entropy = tf.nn.softmax_cross_entropy_with_logits(logits=logits, labels=one_hot_y) loss_operation = tf.reduce_mean(cross_entropy) optimizer = tf.train.AdamOptimizer(learning_rate = rate) training_operation = optimizer.minimize(loss_operation) correct_prediction = tf.equal(tf.argmax(logits, 1), tf.argmax(one_hot_y, 1)) accuracy_operation = tf.reduce_mean(tf.cast(correct_prediction, tf.float32)) saver = tf.train.Saver() def evaluate(X_data, y_data): num_examples = len(X_data) total_accuracy = 0 sess = tf.get_default_session() for offset in range(0, num_examples, BATCH_SIZE): batch_x, batch_y = X_data[offset:offset+BATCH_SIZE], y_data[offset:offset+BATCH_SIZE] accuracy = sess.run(accuracy_operation, feed_dict={x: batch_x, y: batch_y, keep_prob: 1.0}) total_accuracy += (accuracy * len(batch_x)) return total_accuracy / num_examples . (?, 28, 28, 6) (?, 14, 14, 6) (?, 10, 10, 16) (?, 5, 5, 16) (?, 1, 1, 412) (?, 1, 1, 412) . with tf.Session() as sess: sess.run(tf.global_variables_initializer()) num_examples = len(X_train) print(&quot;Training...&quot;) print() validation_accuracy_figure = [] test_accuracy_figure = [] for i in range(EPOCHS): X_train, y_train = shuffle(X_train, y_train) for offset in range(0, num_examples, BATCH_SIZE): end = offset + BATCH_SIZE batch_x, batch_y = X_train[offset:end], y_train[offset:end] sess.run(training_operation, feed_dict={x: batch_x, y: batch_y, keep_prob: 0.5}) validation_accuracy = evaluate(X_valid, y_valid) validation_accuracy_figure.append(validation_accuracy) test_accuracy = evaluate(X_train, y_train) test_accuracy_figure.append(test_accuracy) print(&quot;EPOCH {} ...&quot;.format(i+1)) print(&quot;Test Accuracy = {:.3f}&quot;.format(test_accuracy)) print(&quot;Validation Accuracy = {:.3f}&quot;.format(validation_accuracy)) print() saver.save(sess, &#39;./lenet&#39;) print(&quot;Model saved&quot;) . Training... EPOCH 1 ... Test Accuracy = 0.872 Validation Accuracy = 0.776 EPOCH 2 ... Test Accuracy = 0.958 Validation Accuracy = 0.911 EPOCH 3 ... Test Accuracy = 0.980 Validation Accuracy = 0.947 EPOCH 4 ... Test Accuracy = 0.985 Validation Accuracy = 0.957 EPOCH 5 ... Test Accuracy = 0.991 Validation Accuracy = 0.964 EPOCH 6 ... Test Accuracy = 0.993 Validation Accuracy = 0.972 EPOCH 7 ... Test Accuracy = 0.996 Validation Accuracy = 0.974 EPOCH 8 ... Test Accuracy = 0.995 Validation Accuracy = 0.979 EPOCH 9 ... Test Accuracy = 0.998 Validation Accuracy = 0.981 EPOCH 10 ... Test Accuracy = 0.997 Validation Accuracy = 0.976 EPOCH 11 ... Test Accuracy = 0.998 Validation Accuracy = 0.984 EPOCH 12 ... Test Accuracy = 0.999 Validation Accuracy = 0.984 EPOCH 13 ... Test Accuracy = 0.997 Validation Accuracy = 0.977 EPOCH 14 ... Test Accuracy = 0.999 Validation Accuracy = 0.988 EPOCH 15 ... Test Accuracy = 0.998 Validation Accuracy = 0.988 EPOCH 16 ... Test Accuracy = 0.999 Validation Accuracy = 0.991 EPOCH 17 ... Test Accuracy = 0.999 Validation Accuracy = 0.989 EPOCH 18 ... Test Accuracy = 0.999 Validation Accuracy = 0.990 EPOCH 19 ... Test Accuracy = 0.999 Validation Accuracy = 0.989 EPOCH 20 ... Test Accuracy = 0.999 Validation Accuracy = 0.991 EPOCH 21 ... Test Accuracy = 0.999 Validation Accuracy = 0.988 EPOCH 22 ... Test Accuracy = 0.999 Validation Accuracy = 0.991 EPOCH 23 ... Test Accuracy = 1.000 Validation Accuracy = 0.992 EPOCH 24 ... Test Accuracy = 1.000 Validation Accuracy = 0.990 EPOCH 25 ... Test Accuracy = 1.000 Validation Accuracy = 0.992 EPOCH 26 ... Test Accuracy = 1.000 Validation Accuracy = 0.993 EPOCH 27 ... Test Accuracy = 1.000 Validation Accuracy = 0.993 Model saved . plt.plot(validation_accuracy_figure) plt.title(&quot;Test Accuracy&quot;) plt.show() plt.plot(validation_accuracy_figure) plt.title(&quot;Validation Accuracy&quot;) plt.show() . Display Accuracy on test set . with tf.Session() as sess: saver.restore(sess, tf.train.latest_checkpoint(&#39;.&#39;)) train_accuracy = evaluate(X_train, y_train) print(&quot;Train Accuracy = {:.3f}&quot;.format(train_accuracy)) valid_accuracy = evaluate(X_valid, y_valid) print(&quot;Valid Accuracy = {:.3f}&quot;.format(valid_accuracy)) test_accuracy = evaluate(X_test, y_test) print(&quot;Test Accuracy = {:.3f}&quot;.format(test_accuracy)) . Train Accuracy = 1.000 Valid Accuracy = 0.993 Test Accuracy = 0.942 . . Step 3: Test a Model on New Images . To give yourself more insight into how your model is working, download at least five pictures of German traffic signs from the web and use your model to predict the traffic sign type. . You may find signnames.csv useful as it contains mappings from the class id (integer) to the actual sign name. . Load and Output the Images . import glob import cv2 my_images = sorted(glob.glob(&#39;./mysigns/*.png&#39;)) my_labels = np.array([1, 22, 35, 15, 37, 18]) figures = {} labels = {} my_signs = [] index = 0 for my_image in my_images: img = cv2.cvtColor(cv2.imread(my_image), cv2.COLOR_BGR2RGB) my_signs.append(img) figures[index] = img labels[index] = name_values[my_labels[index]][1].decode(&#39;ascii&#39;) index += 1 plot_figures(figures, 3, 2, labels) . my_signs = np.array(my_signs) my_signs_gray = np.sum(my_signs/3, axis=3, keepdims=True) my_signs_normalized = my_signs_gray/127.5-1 number_to_stop = 6 figures = {} labels = {} for i in range(number_to_stop): labels[i] = name_values[my_labels[i]][1].decode(&#39;ascii&#39;) figures[i] = my_signs_gray[i].squeeze() plot_figures(figures, 3, 2, labels) . Predict the Sign Type for Each Image . ### Run the predictions here and use the model to output the prediction for each image. ### Make sure to pre-process the images with the same pre-processing pipeline used earlier. ### Feel free to use as many code cells as needed. with tf.Session() as sess: sess.run(tf.global_variables_initializer()) # saver = tf.train.import_meta_graph(&#39;./lenet.meta&#39;) saver.restore(sess, &quot;./lenet&quot;) my_accuracy = evaluate(my_signs_normalized, my_labels) print(&quot;My Data Set Accuracy = {:.3f}&quot;.format(my_accuracy)) . My Data Set Accuracy = 1.000 . Analyze Performance . ### Calculate the accuracy for these 5 new images. ### For example, if the model predicted 1 out of 5 signs correctly, it&#39;s 20% accurate on these new images. my_single_item_array = [] my_single_item_label_array = [] for i in range(6): my_single_item_array.append(my_signs_normalized[i]) my_single_item_label_array.append(my_labels[i]) with tf.Session() as sess: sess.run(tf.global_variables_initializer()) # saver = tf.train.import_meta_graph(&#39;./lenet.meta&#39;) saver.restore(sess, &quot;./lenet&quot;) my_accuracy = evaluate(my_single_item_array, my_single_item_label_array) print(&#39;Image {}&#39;.format(i+1)) print(&quot;Image Accuracy = {:.3f}&quot;.format(my_accuracy)) print() . Image 1 Image Accuracy = 1.000 Image 2 Image Accuracy = 1.000 Image 3 Image Accuracy = 1.000 Image 4 Image Accuracy = 1.000 Image 5 Image Accuracy = 1.000 Image 6 Image Accuracy = 1.000 . Output Top 5 Softmax Probabilities For Each Image Found on the Web . For each of the new images, print out the model&#39;s softmax probabilities to show the certainty of the model&#39;s predictions (limit the output to the top 5 probabilities for each image). tf.nn.top_k could prove helpful here. . The example below demonstrates how tf.nn.top_k can be used to find the top k predictions for each image. . tf.nn.top_k will return the values and indices (class ids) of the top k predictions. So if k=3, for each sign, it&#39;ll return the 3 largest probabilities (out of a possible 43) and the correspoding class ids. . Take this numpy array as an example. The values in the array represent predictions. The array contains softmax probabilities for five candidate images with six possible classes. tk.nn.top_k is used to choose the three classes with the highest probability: . # (5, 6) array a = np.array([[ 0.24879643, 0.07032244, 0.12641572, 0.34763842, 0.07893497, 0.12789202], [ 0.28086119, 0.27569815, 0.08594638, 0.0178669 , 0.18063401, 0.15899337], [ 0.26076848, 0.23664738, 0.08020603, 0.07001922, 0.1134371 , 0.23892179], [ 0.11943333, 0.29198961, 0.02605103, 0.26234032, 0.1351348 , 0.16505091], [ 0.09561176, 0.34396535, 0.0643941 , 0.16240774, 0.24206137, 0.09155967]]) . Running it through sess.run(tf.nn.top_k(tf.constant(a), k=3)) produces: . TopKV2(values=array([[ 0.34763842, 0.24879643, 0.12789202], [ 0.28086119, 0.27569815, 0.18063401], [ 0.26076848, 0.23892179, 0.23664738], [ 0.29198961, 0.26234032, 0.16505091], [ 0.34396535, 0.24206137, 0.16240774]]), indices=array([[3, 0, 5], [0, 1, 4], [0, 5, 1], [1, 3, 5], [1, 4, 3]], dtype=int32)) . Looking just at the first row we get [ 0.34763842, 0.24879643, 0.12789202], you can confirm these are the 3 largest probabilities in a. You&#39;ll also notice [3, 0, 5] are the corresponding indices. . ### Print out the top five softmax probabilities for the predictions on the German traffic sign images found on the web. ### Feel free to use as many code cells as needed. k_size = 5 softmax_logits = tf.nn.softmax(logits) top_k = tf.nn.top_k(softmax_logits, k=k_size) with tf.Session() as sess: sess.run(tf.global_variables_initializer()) # my_saver = tf.train.import_meta_graph(&#39;./lenet.meta&#39;) saver.restore(sess, &quot;./lenet&quot;) my_softmax_logits = sess.run(softmax_logits, feed_dict={x: my_signs_normalized, keep_prob: 1.0}) my_top_k = sess.run(top_k, feed_dict={x: my_signs_normalized, keep_prob: 1.0}) # print(my_top_k) for i in range(6): figures = {} labels = {} figures[0] = my_signs[i] labels[0] = &quot;Original&quot; for j in range(k_size): # print(&#39;Guess {} : ({:.0f}%)&#39;.format(j+1, 100*my_top_k[0][i][j])) labels[j+1] = &#39;Guess {} : ({:.0f}%)&#39;.format(j+1, 100*my_top_k[0][i][j]) figures[j+1] = X_valid[np.argwhere(y_valid == my_top_k[1][i][j])[0]].squeeze() # print() plot_figures(figures, 1, 6, labels) . Note:Once you have completed all of the code implementations, you need to finalize your work by exporting the IPython Notebook as an HTML document. Before exporting the notebook to html, all of the code cells need to have been run. You can then export the notebook by using the menu above and navigating to n&quot;, &quot;File -&gt; Download as -&gt; HTML (.html). Include the finished document along with this notebook as your submission. . Project Writeup . Once you have completed the code implementation, document your results in a project writeup using this template as a guide. The writeup can be in a markdown or pdf file. .",
            "url": "https://manisaiprasad.github.io/notes/2019/03/20/Traffic_Sign_Classifier.html",
            "relUrl": "/2019/03/20/Traffic_Sign_Classifier.html",
            "date": " • Mar 20, 2019"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This is where you put the contents of your About page. Like all your pages, it’s in Markdown format. . This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://manisaiprasad.github.io/notes/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://manisaiprasad.github.io/notes/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}